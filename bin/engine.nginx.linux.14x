#!/usr/bin/ksh93
#
#  SDR Development tools, Linux NGINX engine 
#
#  Copyright (c) 2014 Stefan Parvu (www.systemdatarecorder.org).
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software Foundation,
#  Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#  (http://www.gnu.org/copyleft/gpl.html)

# ############################################################### #
# NGINX Engine: Solaris                                           #
#  Includes: PHP, MariaDB, PostgreSQL                             #
#    build_nginx_perl                                             #
#    build_nginx_ossl                                             #
#    build_nginx_gettext                                          #
#    build_nginx_iconv                                            #
#    build_nginx_gettext                                          #
#    build_nginx_readline                                         #
#    build_nginx_gd                                               #
#    build_nginx_perlmods                                         #
#    build_nginx_pcre                                             #
#    build_nginx_fcgi                                             #
#    build_nginx_ws                                               #
#    build_nginx_fcgiwrap                                         #
#    build_nginx_dbdpg                                            #
#    build_nginx_mariadb                                          #
#    build_nginx_pgsql                                            #
#    build_nginx_scripts                                          #
#                                                                 #
#  - /opt/prefix...                                               #
#    - nginx/                                                     #
#    - mariadb/                                                   #
#    - php/                                                       #
#    - perl/                                                      #
#    - mcd/                                                       #
#    - logs/                                                      #
#    - docroot/                                                   #
#    - mariadb_data/                                              #
#    - src/                                                       #
# ############################################################### #


# ############################################################### #
# extract_archive                                                 #
# ############################################################### #
extract_archive() {
# $1 module name
# $2 dir build

modfile=$1
bfile=$2

# Debug
# print "module name: $modfile"
# print "archive dir: $bfile"

if [[ -d $bfile ]]; then
    print "Info: Step 1 - Extracting $bfile ..." |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    print "Warning: ${bfile} directory found, cleaning..." |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}

    rm -rf ${bfile}
    if (( $? != 0 )); then
        print "Error: cannot clean. Check ${modfile} , ${bfile}" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        exit 3
    fi 
    gzip -dc ${bfile}.tar.gz | tar xvf - >> ${BUILD_PATH}/${BUILD_LOG}
else
    print "Info: Step 1 - Extracting $bfile ..." |\
    tee -a ${BUILD_PATH}/${BUILD_LOG}
    gzip -dc ${bfile}.tar.gz | tar xvf - >> ${BUILD_PATH}/${BUILD_LOG}
fi

}


# ############################################################### #
# NGINX: Perl Build Phase                                         #
# ############################################################### #
build_nginx_perl() {
dir=perl
step1=0
step2=0
step3=0
step4=0
step5=0
step6=0

cd $dir
print "\n############################################################"
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Submodule: $dir" | tee -a ${BUILD_PATH}/${BUILD_LOG}
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# get CPAN version
print $dirarchive | sed 's/perl-//' | read cpanver


# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 2 - Configure perl ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

if [[ "$PT_NAME" == "x86_64" ]]; then
   sh Configure -Doptimize='-O3' -Duselargefiles -Duse64bitall \
   -Dcf_by="support@systemdatarecorder.org"       \
   -Dcf_email="support@systemdatarecorder.org"    \
   -Dprefix=${iprefix}/perl -des >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
else
   sh Configure -Doptimize='-O3' -Duselargefiles -Duse64bitint \
   -Dcf_by="support@systemdatarecorder.org"       \
   -Dcf_email="support@systemdatarecorder.org"    \
   -Dprefix=${iprefix}/perl -des >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
fi

if (( $? != 0 )); then
    print "Error: configure perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    exit 3
else
    step2=1
fi


# STEP 3
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 3 - Make perl..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    exit 3
else
    step3=1
fi

# STEP 4
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 4 - Make test perl..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make test >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make test perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    exit 3
else
    step4=1
fi


# STEP 5
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 5 - Make install perl..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
 
if [[ -d ${iprefix}/perl ]]; then
    print "Warning: perl directory found, cleaning it..." |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm -rf ${iprefix}/perl
    if (( $? != 0 )); then
        print "Error: cleaning $dir directory" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        exit 3
    fi
fi
 
make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make install perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    exit 3
else
    step5=1
fi


# STEP 6

print "" >> ${BUILD_PATH}/${BUILD_LOG}

print "Info: Step 6 - CPAN modules" | tee -a ${BUILD_PATH}/${BUILD_LOG}

cp /opt/build/etc/Config.pm ${iprefix}/perl/lib/${cpanver}/CPAN
env PERL_MM_USE_DEFAULT=1 ${iprefix}/perl/bin/perl -MCPAN -e 'install Bundle::LWP' >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: Bundle::LWP installation failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    (( step6 = step6 + 1))
fi

for lib in CGI FCGI CGI::Simple CGI::Minimal FCGI::ProcManager \
    Email::Valid MIME::Lite Date::Format Date::Parse \
    Date::Calc Date::Manip HTML::Parser HTML::Entities Digest::SHA DateTime \
    DateTime::Timezone DBI Template Email::Send Email::MIME \
    Email::MIME::Encodings Email::MIME::Modifier \
    URI Email::MIME::Attachment::Stripper Email::Reply HTML::Scrubber \
    MIME::Parser Authen::SASL Captcha::reCAPTCHA Archive::Tar Geo::ReadGRIB \
    Net::Wire10 HTML::TreeBuilder::XPath XML::NamespaceSupport \
    XML::SAX XML::Simple Math::Random::ISAAC
do
    if [[ $lib == "MIME::Lite" ]]; then
        env PERL_MM_USE_DEFAULT=1 \
          ${iprefix}/perl/bin/perl -MCPAN -e 'install "'$lib'"' >> \
          ${BUILD_PATH}/${BUILD_LOG} 2>&1
        if (( $? != 0 )); then
            tee -a ${BUILD_PATH}/${BUILD_LOG}
            exit 3
        else
            ((step6 = step6 + 1))
            continue
        fi
    fi

    ${iprefix}/perl/bin/perl -MCPAN -e 'install "'$lib'"' >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
    if (( $? != 0 )); then
        print "Error: $lib installation failed !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        ((step6 = step6 + 1))
    fi
done

# there are 31 perl modules install calls 
(( step6 = step6 / 31 ));


# final check; all 6 steps
(( ngx_perl_done = step1 + step2 + step3 + step4 + step5 + step6 ))
if (( ngx_perl_done == 6 )); then
  ngx_perl_done=1
else
  ngx_perl_done=0
fi

print "\n############################################################"

cd ..
rm -rf $dirarchive >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 5
fi
cd ..
}


# ############################################################### #
# NGINX ALL: readline Build Phase                                 #
# ############################################################### #

build_nginx_readline() {
dir=readline
step1=0
step2=0
step3=0
step4=0


cd $dir
print "\n############################################################"
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Submodule: $dir" | tee -a ${BUILD_PATH}/${BUILD_LOG}
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

env CC=cc CFLAGS="-O3 -I${iprefix}/include" \
    LDFLAGS="-L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib \
    -L/lib64 -L/usr/lib64" ./configure \
    --prefix=${iprefix} >> ${BUILD_PATH}/${BUILD_LOG} 2>&1

if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi  


# STEP 3
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi

# STEP 4
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}


make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make install failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

# final check; all 4 steps
(( ngx_rdln_done = step1 + step2 + step3 + step4 ))
if (( ngx_rdln_done == 4 )); then
  ngx_rdln_done=1
else
   ngx_rdln_done=90
fi

cd ..
rm -rf $dirarchive >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 5
fi
cd ..

}


# ############################################################### #
# NGINX ALL: gettext Build Phase                                  #
# ############################################################### #
build_nginx_gettext() {
dir=gettext
step1=0
step2=0
step3=0
step4=0


cd $dir
print "\n############################################################"
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Submodule: $dir" | tee -a ${BUILD_PATH}/${BUILD_LOG}
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

env CC=cc CFLAGS="-O3 -I${iprefix}/include" \
    LDFLAGS="-L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib \
             -L/lib64 -L/usr/lib64" ./configure \
            --prefix=${iprefix} >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    exit 3
else
    step2=1
fi  



# STEP 3
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    exit 3
else
    step3=1
fi


# STEP 4
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make install perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    exit 3
else
    step4=1
fi


# final check; all 4 steps
(( ngx_gett_done = step1 + step2 + step3 + step4 ))
if (( ngx_gett_done == 4 )); then
   ngx_gett_done=1
else
   ngx_gett_done=90
fi

cd ..
rm -rf $dirarchive >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 5
fi
cd ..

}


# ############################################################### #
# NGINX ALL: libxml2 Build Phase                                  #
# ############################################################### #
build_nginx_libxml2() {
dir=libxml2
step1=0
step2=0
step3=0
step4=0


cd $dir
print "\n############################################################"
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Submodule: $dir" | tee -a ${BUILD_PATH}/${BUILD_LOG}
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

env PATH=${iprefix}/bin:${iprefix}/perl/bin:$PATH CC=cc CFLAGS="-O3 -I${iprefix}/include" \
    LDFLAGS="-L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib \
    -L/lib64 -L/usr/lib64" ./configure --with-python=no \
    --prefix=${iprefix} >> ${BUILD_PATH}/${BUILD_LOG} 2>&1

if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    exit 3
else
    step2=1
fi  



# STEP 3
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    exit 3
else
    step3=1
fi


# STEP 4
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make install perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    exit 3
else
    step4=1
fi


# final check; all 4 steps
(( ngx_libxml2_done = step1 + step2 + step3 + step4 ))
if (( ngx_libxml2_done == 4 )); then
   ngx_libxml2_done=1
else
   ngx_libxml2_done=90
fi

cd ..
rm -rf $dirarchive >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 5
fi
cd ..

}


# ############################################################### #
# NGINX ALL: libjpeg Build Phase                                  #
# ############################################################### #
build_nginx_libjpeg() {
dir=libjpeg
step1=0
step2=0
step3=0
step4=0


cd $dir
print "\n############################################################"
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Submodule: $dir" | tee -a ${BUILD_PATH}/${BUILD_LOG}
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

env PKG_CONFIG_PATH=${iprefix}/lib/pkgconfig PATH=${iprefix}/bin:$PATH \
    CFLAGS="-O3 -I${iprefix}/include"                        \
    LDFLAGS="-L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib" \
    ./configure --prefix=${iprefix} >> ${BUILD_PATH}/${BUILD_LOG} 2>&1

if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    exit 3
else
    step2=1
fi  



# STEP 3
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    exit 3
else
    step3=1
fi


# STEP 4
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make install perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    exit 3
else
    step4=1
fi


# final check; all 4 steps
(( ngx_libjpeg_done = step1 + step2 + step3 + step4 ))
if (( ngx_libjpeg_done == 4 )); then
   ngx_libjpeg_done=1
else
   ngx_libjpeg_done=90
fi

cd ..
rm -rf $dirarchive >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 5
fi
cd ..

}


# ############################################################### #
# NGINX ALL: libpng Build Phase                                   #
# ############################################################### #
build_nginx_libpng() {
dir=libpng
step1=0
step2=0
step3=0
step4=0


cd $dir
print "\n############################################################"
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Submodule: $dir" | tee -a ${BUILD_PATH}/${BUILD_LOG}
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

env PKG_CONFIG_PATH=${iprefix}/lib/pkgconfig PATH=${iprefix}/bin:$PATH \
    CFLAGS="-O3 -I${iprefix}/include"                        \
    LDFLAGS="-L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib" \
    ./configure --prefix=${iprefix} >> ${BUILD_PATH}/${BUILD_LOG} 2>&1

if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    exit 3
else
    step2=1
fi  



# STEP 3
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    exit 3
else
    step3=1
fi


# STEP 4
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make install perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    exit 3
else
    step4=1
fi


# final check; all 4 steps
(( ngx_libpng_done = step1 + step2 + step3 + step4 ))
if (( ngx_libpng_done == 4 )); then
   ngx_libpng_done=1
else
   ngx_libpng_done=90
fi

cd ..
rm -rf $dirarchive >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 5
fi
cd ..

}


# ############################################################### #
# NGINX ALL: freetype Build Phase                                 #
# ############################################################### #
build_nginx_freetype() {
dir=freetype
step1=0
step2=0
step3=0
step4=0


cd $dir
print "\n############################################################"
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Submodule: $dir" | tee -a ${BUILD_PATH}/${BUILD_LOG}
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

env PKG_CONFIG_PATH=${iprefix}/lib/pkgconfig PATH=${iprefix}/bin:$PATH \
    CFLAGS="-O3 -I${iprefix}/include"                        \
    LDFLAGS="-L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib" \
    ./configure --prefix=${iprefix} >> ${BUILD_PATH}/${BUILD_LOG} 2>&1

if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    exit 3
else
    step2=1
fi  


# STEP 3
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    exit 3
else
    step3=1
fi


# STEP 4
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make install perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    exit 3
else
    step4=1
fi


# final check; all 4 steps
(( ngx_freetype_done = step1 + step2 + step3 + step4 ))
if (( ngx_freetype_done == 4 )); then
   ngx_freetype_done=1
else
   ngx_freetype_done=90
fi

cd ..
rm -rf $dirarchive >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 5
fi
cd ..

}


# ############################################################### #
# NGINX ALL: fontconfig Build Phase                               #
# ############################################################### #
build_nginx_fontconfig() {
dir=fontconfig
step1=0
step2=0
step3=0
step4=0

cd $dir
print "\n############################################################"
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Submodule: $dir" | tee -a ${BUILD_PATH}/${BUILD_LOG}
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

env PKG_CONFIG_PATH=${iprefix}/lib/pkgconfig PATH=${iprefix}/bin:$PATH \
    CFLAGS="-O3 -I${iprefix}/include"                        \
    LDFLAGS="-L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib" \
    ./configure --prefix=${iprefix} --enable-libxml2 --with-freetype-config=${iprefix}/bin/freetype-config >> ${BUILD_PATH}/${BUILD_LOG} 2>&1

if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    exit 3
else
    step2=1
fi  


# STEP 3
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    exit 3
else
    step3=1
fi


# STEP 4
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make install perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    exit 3
else
    step4=1
fi


# final check; all 4 steps
(( ngx_fontconfig_done = step1 + step2 + step3 + step4 ))
if (( ngx_fontconfig_done == 4 )); then
   ngx_fontconfig_done=1
else
   ngx_fontconfig_done=90
fi

cd ..
rm -rf $dirarchive >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 5
fi
cd ..

}



# ############################################################### #
# NGINX: iconv Build Phase                                           #
# ############################################################### #

build_nginx_iconv() {
dir=iconv
step1=0
step2=0
step3=0
step4=0


cd $dir
print "\n############################################################"
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Submodule: $dir" | tee -a ${BUILD_PATH}/${BUILD_LOG}
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

env CC=cc CFLAGS="-O3 -I${iprefix}/include" \
    LDFLAGS="-L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib \
    -L/lib64 -L/usr/lib64" ./configure \
    --prefix=${iprefix} >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
 
if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi  


# STEP 3
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 

# STEP 4
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}


make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make install failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

# final check; all 4 steps
(( ngx_iconv_done = step1 + step2 + step3 + step4 ))
if (( ngx_iconv_done == 4 )); then
   ngx_iconv_done=1
else
   ngx_conv_done=0
fi

cd ..
rm -rf $dirarchive >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 5
fi
cd ..

}


# ############################################################### #
# NGINX: openssl Build Phase                                      #
# ############################################################### #

build_nginx_ossl() {
dir=openssl
step1=0
step2=0
step3=0
step4=0


cd $dir
print "\n############################################################"
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Submodule: $dir" | tee -a ${BUILD_PATH}/${BUILD_LOG}
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi


# STEP 2
cd ${archive_file%%.tar*}

print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

if [[ "$PT_NAME" == "x86_64" ]]; then
    env PATH=${iprefix}/bin:${iprefix}/perl/bin:$PATH \
     ./Configure linux-x86_64 threads shared --prefix=${iprefix} \
     --openssldir=${iprefix}/openssl >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
else
    env PATH=${iprefix}/bin:${iprefix}/perl/bin:$PATH \
     ./Configure linux-elf threads shared --prefix=${iprefix} \
     --openssldir=${iprefix}/openssl >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
fi

if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi  

# STEP 3
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}


make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 

# STEP 4
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make install perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi



# final check; all 4 steps
(( ngx_ossl_done = step1 + step2 + step3 + step4 ))
if (( ngx_ossl_done == 4 )); then
   ngx_ossl_done=1
else
   ngx_ossl_done=0
fi

cd ..
rm -rf $dirarchive >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 5
fi
cd ..

}



# ############################################################### #
# NGINX: GD Build Phase                                           #
# ############################################################### #

build_nginx_gd() {
dir=libgd
step1=0
step2=0
step3=0
step4=0


cd $dir
print "\n############################################################"
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Submodule: $dir" | tee -a ${BUILD_PATH}/${BUILD_LOG}
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

env PKG_CONFIG_PATH=${iprefix}/lib/pkgconfig PATH=${iprefix}/bin:$PATH \
    PATH=${iprefix}/bin:${iprefix}/perl/bin:$PATH \
    CC=cc CFLAGS="-O3 -I${iprefix}/include" \
    LDFLAGS="-L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib \
    -L/lib64 -L/usr/lib64" ./configure --prefix=${iprefix} >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
 
if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi  

# STEP 3
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

#/bin/sh config/missing --run aclocal-1.9 -I config >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
#/bin/sh config/missing --run automake-1.9 --foreign >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
#/bin/sh config/missing --run autoconf >> ${BUILD_PATH}/${BUILD_LOG} 2>&1

make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 


# STEP 4
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}


make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make install gd failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

# final check; all 4 steps
(( ngx_gd_done = step1 + step2 + step3 + step4 ))
if (( ngx_gd_done == 4 )); then
   ngx_gd_done=1
else
   ngx_gd_done=0
fi

cd ..
rm -rf $dirarchive >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 5
fi
cd ..

}

# ############################################################### #
# NGINX: Perl Modules: GD                                         #
# ############################################################### #

build_nginx_perlmods() {

dir=perlmods
step1=0
step2=0
step3=0
step4=0
step5=0

cd $dir
print "\n############################################################"
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Submodule: $dir" | tee -a ${BUILD_PATH}/${BUILD_LOG}
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

env PATH=${iprefix}/bin:${iprefix}/perl/bin:$PATH \
    CC=cc ${iprefix}/perl/bin/perl Makefile.PL  >> ${BUILD_PATH}/${BUILD_LOG} 2>&1

# STEP 3
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 


# STEP 4
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make install perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

# STEP 5
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 5 - Install CPAN GD modules..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

for lib in GD::Text GD::Graph Chart::Base Template::Plugin::GD::Image \
    PatchReader Test::Taint File::MimeInfo Encode-Detect TheSchwartz \
    Daemon-Generic HTML::FormatText::WithLinks
do
    env PERL_MM_USE_DEFAULT=1 \
      ${NGXAL_PERLBIN}/perl -MCPAN -e 'install "'$lib'"' >> \
        ${BUILD_PATH}/${BUILD_LOG} 2>&1
        if (( $? != 0 )); then
            tee -a ${BUILD_PATH}/${BUILD_LOG}
            exit 3
        else
            ((step5 = step5 + 1))
        fi
done

# there are 11 perl modules install calls
(( step5 = step5 / 11 ));


#
# final check; all 5 steps
(( ngx_perlmodules_done = step1 + step2 + step3 + step4 + step5 ))
if (( ngx_perlmodules_done == 5 )); then
   ngx_perlmodules_done=1
else
   ngx_perlmodules_done=0
fi

cd ..
rm -rf $dirarchive >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 5
fi
cd ..

}


# ############################################################### #
# NGINX: Perl Module: DBD::mysql                                  #
# ############################################################### #

build_nginx_dbdmysql() {

dir=DBD-mysql
step1=0
step2=0
step3=0
step4=0
step5=0

cd $dir
print "\n############################################################"
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Submodule: $dir" | tee -a ${BUILD_PATH}/${BUILD_LOG}
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

env PATH=${iprefix}/mariadb/bin:$PATH \
 ${iprefix}/perl/bin/perl Makefile.PL \
  --cflags="-I${iprefix}/mariadb/include/mysql -I${iprefix}/include" \
  --libs="-L${iprefix}/lib -R${iprefix}/lib -L${iprefix}/mariadb/lib/mysql -R${iprefix}/mariadb/lib/mysql -lmysqlclient -lz -lposix4 -lsocket -lnsl -lm" >> ${BUILD_PATH}/${BUILD_LOG} 2>&1

if (( $? != 0 )); then
    print "Error: configure perl Makefile.PL $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi




# STEP 3
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 


# STEP 4
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make install perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

#
# final check; all 4 steps
(( ngx_dbdmysql_done = step1 + step2 + step3 + step4 ))
if (( ngx_dbdmysql_done == 4 )); then
   ngx_dbdmysql_done=1
else
   ngx_dbdmysql_done=0
fi

cd ..
rm -rf $dirarchive >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 5
fi
cd ..

}



# ############################################################### #
# NGINX: Perl Module: DBD::Pg                                     #
# ############################################################### #

build_nginx_dbdpg() {

dir=dbdpg
step1=0
step2=0
step3=0
step4=0
step5=0

cd $dir
print "\n############################################################"
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Submodule: $dir" | tee -a ${BUILD_PATH}/${BUILD_LOG}
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

env PATH=${iprefix}/bin:$PATH ${iprefix}/perl/bin/perl Makefile.PL  >> ${BUILD_PATH}/${BUILD_LOG} 2>&1

cp ../Makefile.good Makefile
if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi



# STEP 3
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 


# STEP 4
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make install perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

#
# final check; all 4 steps
(( ngx_dbdpg_done = step1 + step2 + step3 + step4 ))
if (( ngx_dbdpg_done == 4 )); then
   ngx_dbdpg_done=1
else
   ngx_dbdpg_done=0
fi

cd ..
rm -rf $dirarchive >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 5
fi
cd ..

}


# ############################################################### #
# NGINX: PCRE Build Phase                                         #
# ############################################################### #

build_nginx_pcre() {
dir=pcre
step1=0
step2=0
step3=0
step4=0


cd $dir
print "\n############################################################"
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Submodule: $dir" | tee -a ${BUILD_PATH}/${BUILD_LOG}
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
 
env PATH=${iprefix}/bin:${iprefix}/perl/bin:$PATH \
    CC=cc CFLAGS="-O3 -I${iprefix}/include" \
    LDFLAGS="-L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib \
    -L/lib64 -L/usr/lib64" ./configure \
    --disable-cpp --enable-utf8 --enable-unicode-properties \
    --prefix=${iprefix} >> ${BUILD_PATH}/${BUILD_LOG} 2>&1

if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi  



# STEP 3
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 

# STEP 4
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}


make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make install gd failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

# final check; all 4 steps
(( ngx_pcre_done = step1 + step2 + step3 + step4 ))
if (( ngx_pcre_done == 4 )); then
   ngx_pcre_done=1
else
   ngx_pcre_done=0
fi

cd ..
rm -rf $dirarchive >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 5
fi
cd ..

}


# ############################################################### #
# NGINX: FCGI Build Phase                                         #
# ############################################################### #

build_nginx_fcgi() {
dir=fcgi
step1=0
step2=0
step3=0
step4=0


cd $dir
print "\n############################################################"
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Submodule: $dir" | tee -a ${BUILD_PATH}/${BUILD_LOG}
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
 
env PATH=${iprefix}/bin:${iprefix}/perl/bin:$PATH \
    CC=cc CFLAGS="-O3 -I${iprefix}/include" \
    LDFLAGS="-L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib \
    -L/lib64 -L/usr/lib64" ./configure \
    --prefix=${iprefix} >> ${BUILD_PATH}/${BUILD_LOG} 2>&1

if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi


# STEP 3
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

# if we are in gcc 4.4 and debian based system we might hit
# Debian Bug report logs - #504963

/usr/bin/lsb_release -i | sed 's/^Distributor ID://' | read distro
if [[ $distro == "Ubuntu" ]]; then
    # check gcc version   
    gcc --version | head -1 | sed 's/^.* //' | read gccver

    case "$gccver" in
     4.4*)
         # we are using gcc 4.4+
         ${iprefix}/perl/bin/perl -pi -le 'print "#include <cstdio>" if $. == 24' libfcgi/fcgio.cpp     
    esac
fi


make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 



# STEP 4
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}


make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make install gd failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

# final check; all 4 steps
(( ngx_fcgi_done = step1 + step2 + step3 + step4 ))
if (( ngx_fcgi_done == 4 )); then
   ngx_fcgi_done=1
else
   ngx_fcgi_done=0
fi

cd ..
rm -rf $dirarchive >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 5
fi
cd ..

}


# ############################################################### #
# NGINX: FCGIWRAP Build Phase                                     #
# ############################################################### #

build_nginx_fcgiwrap() {
dir=fcgiwrap
step1=0
step2=0
step3=0


cd $dir
print "\n############################################################"
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Submodule: $dir" | tee -a ${BUILD_PATH}/${BUILD_LOG}
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 2 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
cp Makefile.Linux Makefile
make iprefix=${iprefix} >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi 


# STEP 3
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 3 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

make iprefix=${iprefix} install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make install fcgiwrap failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi


# final check; all 3 steps
(( ngx_fcgiw_done = step1 + step2 + step3 ))
if (( ngx_fcgi_done == 3 )); then
   ngx_fcgiw_done=1
else
   ngx_fcgiw_done=0
fi

cd ..
rm -rf $dirarchive >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 5
fi
cd ..

}



# ############################################################### #
# NGINX: WS nginx Build Phase                                     #
# ############################################################### #

build_nginx_ws() {
dir=ws
step1=0
step2=0
step3=0
step4=0


cd $dir
print "\n############################################################"
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Submodule: $dir" | tee -a ${BUILD_PATH}/${BUILD_LOG}
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

# copy the fair plugin
cp -pr ../../upstream .

print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
if [[ $PT_NAME == "i686" ]]; then
    env PKG_CONFIG_PATH=${iprefix}/lib/pkgconfig   \
    CC=cc CFLAGS="-O3"                             \
    ./configure --prefix=${iprefix} --with-ipv6    \
    --with-perl=${iprefix}/perl/bin                \
    --with-http_ssl_module                         \
    --with-http_stub_status_module                 \
    --with-http_realip_module                      \
    --with-http_flv_module                         \
    --with-http_gzip_static_module                 \
    --with-cc-opt="-I${iprefix}/include"           \
    --with-ld-opt="-L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib" \
    --add-module=upstream \
    --http-client-body-temp-path=logs/client_body_temp   \
    --http-proxy-temp-path=logs/proxy_temp         \
    --http-fastcgi-temp-path=logs/fastcgi_temp       \
    --http-uwsgi-temp-path=logs/uwsgi_temp         \
    --http-scgi-temp-path=logs/scgi_temp >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
else
    env PKG_CONFIG_PATH=${iprefix}/lib/pkgconfig   \
    CC=cc CFLAGS="-m64 -O3"                        \
    ./configure --prefix=${iprefix} --with-ipv6    \
    --with-perl=${iprefix}/perl/bin                \
    --with-http_ssl_module                         \
    --with-http_stub_status_module                 \
    --with-http_realip_module                      \
    --with-http_flv_module                         \
    --with-http_gzip_static_module                 \
    --with-cc-opt="-I${iprefix}/include"          \
    --with-ld-opt="-m64 -L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib" \
    --add-module=upstream \
    --http-client-body-temp-path=logs/client_body_temp   \
    --http-proxy-temp-path=logs/proxy_temp         \
    --http-fastcgi-temp-path=logs/fastcgi_temp       \
    --http-uwsgi-temp-path=logs/uwsgi_temp         \
    --http-scgi-temp-path=logs/scgi_temp >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
fi

if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi  


# STEP 3
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 

# STEP 4
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}


make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make install gd failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

# final check; all 4 steps
(( ngx_ws_done = step1 + step2 + step3 + step4 ))
if (( ngx_ws_done == 4 )); then
   ngx_ws_done=1
else
   ngx_ws_done=0
fi

cd ..
rm -rf $dirarchive >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 5
fi
cd ..

}



# ############################################################### #
# NGINX: MariaDB Build Phase                                      #
# ############################################################### #

build_nginx_mariadb() {
dir=mariadb
step1=0
step2=0
step3=0
step4=0


cd $dir
print "\n############################################################"
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Submodule: $dir" | tee -a ${BUILD_PATH}/${BUILD_LOG}
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

# TO BE REPLACED WITH Linux Configure
#env CC=cc CFLAGS="-m64 -xO3 -Kpic -I${iprefix}/include" \
# CXX="/usr/bin/CC -lCrun" CXXPICFLAGS="-Kpic" \
# CXXFLAGS="-m64 -xO3 -Kpic -I${iprefix}/include" \
# LDFLAGS="-m64 -L${iprefix}/lib -R${iprefix}/lib -L/lib/64 -L/usr/lib/64 \
# -L/usr/sfw/lib/64 -R/usr/sfw/lib/64" \
# ./configure --prefix=${iprefix}/mariadb --exec-prefix=${iprefix}/mariadb \
# --enable-local-infile --with-big-tables --with-system-type="sun-solaris10" \
#  --with-mysqld-user=$iuser \
# --with-plugins=myisam,archive,heap,aria,xtradb \
# --with-aria-tmp-tables >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi  

# STEP 3
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
gmake >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 

# STEP 4
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}


gmake install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make install gd failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

# final check; all 4 steps
(( ngx_mariadb_done = step1 + step2 + step3 + step4 ))
if (( ngx_mariadb_done == 4 )); then
   ngx_mariadb_done=1
else
   ngx_mariadb_done=0
fi

cd ..
rm -rf $dirarchive >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 5
fi
cd ..

}


# ############################################################### #
# NGINX: Libevent Build Phase                                     #
# ############################################################### #

build_nginx_event() {
dir=event
step1=0
step2=0
step3=0
step4=0


cd $dir
print "\n############################################################"
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Submodule: $dir" | tee -a ${BUILD_PATH}/${BUILD_LOG}
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}


if [[ "$PT_NAME" == "x86_64" ]]; then 
    env CC=cc CFLAGS="-O3 -I${iprefix}/include" \
        LDFLAGS="-L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib \
        -L/lib64 -L/usr/lib64" ./configure \
    --prefix=${iprefix} >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
else
    env CC=cc CFLAGS="-O3 -I${iprefix}/include" \
        LDFLAGS="-L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib \
        -L/lib -L/usr/lib" ./configure \
    --prefix=${iprefix} >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
fi

if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi  


# STEP 3
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 

# STEP 4
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}


make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make install gd failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

# final check; all 4 steps
(( ngx_event_done = step1 + step2 + step3 + step4 ))
if (( ngx_event_done == 4 )); then
   ngx_event_done=1
else
   ngx_event_done=0
fi

cd ..
rm -rf $dirarchive >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 5
fi
cd ..

}



# ############################################################### #
# NGINX: Memcached Build Phase                                    #
# ############################################################### #

build_nginx_mcd() {
dir=memcached
step1=0
step2=0
step3=0
step4=0


cd $dir
print "\n############################################################"
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Submodule: $dir" | tee -a ${BUILD_PATH}/${BUILD_LOG}
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

if [[ "$PT_NAME" == "x86_64" ]]; then 
    env CC=cc CFLAGS="-O3 -I${iprefix}/include" \
        LDFLAGS="-L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib \
        -L/lib64 -L/usr/lib64" ./configure \
    --prefix=${iprefix} >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
else
    env CC=cc CFLAGS="-O3 -I${iprefix}/include" \
        LDFLAGS="-L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib \
        -L/lib -L/usr/lib" ./configure \
    --prefix=${iprefix} >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
fi

if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi  


# STEP 3
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 

# STEP 4
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}


make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make install gd failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

# final check; all 4 steps
(( ngx_mcd_done = step1 + step2 + step3 + step4 ))
if (( ngx_mcd_done == 4 )); then
   ngx_mcd_done=1
else
   ngx_mcd_done=0
fi

cd ..
rm -rf $dirarchive >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 5
fi
cd ..

}




# ############################################################### #
# NGINX: Libidn Build Phase                                       #
# ############################################################### #

build_nginx_idn() {
dir=idn
step1=0
step2=0
step3=0
step4=0


cd $dir
print "\n############################################################"
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Submodule: $dir" | tee -a ${BUILD_PATH}/${BUILD_LOG}
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

if [[ "$PT_NAME" == "x86_64" ]]; then 
    env CC=cc CFLAGS="-O3 -I${iprefix}/include" \
        LDFLAGS="-L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib \
        -L/lib64 -L/usr/lib64" ./configure \
    --prefix=${iprefix} >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
else
    env CC=cc CFLAGS="-O3 -I${iprefix}/include" \
        LDFLAGS="-L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib \
        -L/lib -L/usr/lib" ./configure \
    --prefix=${iprefix} >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
fi

if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi  


# STEP 3
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 

# STEP 4
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make install gd failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

# final check; all 4 steps
(( ngx_idn_done = step1 + step2 + step3 + step4 ))
if (( ngx_idn_done == 4 )); then
   ngx_idn_done=1
else
   ngx_idn_done=0
fi

cd ..
rm -rf $dirarchive >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 5
fi
cd ..

}


# ############################################################### #
# NGINX: Libcurl Build Phase                                      #
# ############################################################### #

build_nginx_curl() {
dir=curl
step1=0
step2=0
step3=0
step4=0


cd $dir
print "\n############################################################"
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Submodule: $dir" | tee -a ${BUILD_PATH}/${BUILD_LOG}
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

env PATH=${iprefix}/bin:${iprefix}/perl/bin:$PATH \
    CC=cc CFLAGS="-O3" \
    CPPFLAGS="-I${iprefix}/include" \
    LDFLAGS="-L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib \
    -L/lib64 -L/usr/lib64" ./configure --enable-cookies --enable-nonblocking \
    --with-libidn --prefix=${iprefix} >> ${BUILD_PATH}/${BUILD_LOG} 2>&1

if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi  


# STEP 3
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 

# STEP 4
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make install gd failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

# final check; all 4 steps
(( ngx_curl_done = step1 + step2 + step3 + step4 ))
if (( ngx_curl_done == 4 )); then
   ngx_curl_done=1
else
   ngx_curl_done=0
fi

cd ..
rm -rf $dirarchive >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 5
fi
cd ..

}



# ############################################################### #
# NGINX: Libmcrypt Build Phase                                      #
# ############################################################### #

build_nginx_mcrypt() {
dir=libmcrypt
step1=0
step2=0
step3=0
step4=0

cd $dir
print "\n############################################################"
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Submodule: $dir" | tee -a ${BUILD_PATH}/${BUILD_LOG}
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

env PATH=${iprefix}/bin:${iprefix}/perl/bin:$PATH \
    CC=cc CFLAGS="-O3" \
    CPPFLAGS="-I${iprefix}/include" \
    LDFLAGS="-L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib \
    -L/lib64 -L/usr/lib64" \
    ./configure --prefix=${iprefix} --disable-posix-threads \
    --enable-dynamic-loading  \
    --with-included-algos=cast-128,gost,rijndael-128,twofish,arcfour,cast-256,loki97,rijndael-192,saferplus,wake,blowfish-compat,des,rijndael-256,serpent,xtea,blowfish,enigma,rc2,tripledes >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi  

# STEP 3
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 

# STEP 4
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make install gd failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

# final check; all 4 steps
(( ngx_mcrypt_done = step1 + step2 + step3 + step4 ))
if (( ngx_mcrypt_done == 4 )); then
   ngx_mcrypt_done=1
else
   ngx_mcrypt_done=0
fi

cd ..
rm -rf $dirarchive >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 5
fi
cd ..

}



# ############################################################### #
# NGINX: PHP Build Phase                                          #
# ############################################################### #

build_nginx_php() {
dir=php
step1=0
step2=0
step3=0
step4=0


cd $dir
print "\n############################################################"
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Submodule: $dir" | tee -a ${BUILD_PATH}/${BUILD_LOG}
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

env PATH=${iprefix}/bin:${iprefix}/perl/bin:$PATH \
    CC=cc CFLAGS="-O3" \
    CPPFLAGS="-I${iprefix}/include" \
    LDFLAGS="-L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib \
    -L/lib64 -L/usr/lib64" ./configure --prefix=${iprefix}/php --with-mysql=${iprefix}/mariadb \
     --with-mysqli=${iprefix}/mariadb/bin/mysql_config \
     --with-gd=${iprefix} --with-curl=${iprefix} --with-pear --enable-libxml \
     --enable-fpm --enable-zip --with-zlib --enable-mbstring --with-mcrypt=${iprefix} >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi

# STEP 3
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 

# STEP 4
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make install gd failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

# final check; all 4 steps
(( ngx_php_done = step1 + step2 + step3 + step4 ))
if (( ngx_php_done == 4 )); then
   ngx_php_done=1
else
   ngx_php_done=0
fi

cd ..
rm -rf $dirarchive >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 5
fi
cd ..

}



# ############################################################### #
# NGINX: PECL + MEMCACHE Build Phase                              #
# ############################################################### #

build_nginx_peclmcd() {
dir=peclmemcache
step1=0
step2=0
step3=0
step4=0


cd $dir
print "\n############################################################"
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Submodule: $dir" | tee -a ${BUILD_PATH}/${BUILD_LOG}
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

env PATH=${iprefix}/bin:${iprefix}/perl/bin:$PATH \
    CC=cc CFLAGS="-O3" \
    CPPFLAGS="-I${iprefix}/include" \
    LDFLAGS="-L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib \
    -L/lib64 -L/usr/lib64" ./configure --prefix=${iprefix} --enable-memcache >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi

# STEP 3
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 

# STEP 4
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make install gd failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

# final check; all 4 steps
(( ngx_peclmcd_done = step1 + step2 + step3 + step4 ))
if (( ngx_peclmcd_done == 4 )); then
   ngx_peclmcd_done=1
else
   ngx_peclmcd_done=0
fi

cd ..
rm -rf $dirarchive >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 5
fi
cd ..

}


# ############################################################### #
# NGINX: pgsql Build Phase                                        #
# ############################################################### #
build_nginx_pgsql() {
dir=pgsql
step1=0
step2=0
step3=0
step4=0

cd $dir
print "\n############################################################"
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Submodule: $dir" | tee -a ${BUILD_PATH}/${BUILD_LOG}
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}


env PATH=${iprefix}/bin:${iprefix}/perl/bin:$PATH CC=cc CFLAGS="-O3 -I${iprefix}/include" \
    LDFLAGS="-L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib -L/lib64 -L/usr/lib64" \
    ./configure --prefix=${iprefix}/pgsql --with-openssl --with-libs=${iprefix}/lib >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi  


# STEP 3
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 

# STEP 4
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make install gd failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

# final check; all 4 steps
(( ngx_pgsql_done = step1 + step2 + step3 + step4 ))
if (( ngx_pgsql_done == 4 )); then
   ngx_pgsql_done=1
else
   ngx_pgsql_done=90
fi

cd ..
rm -rf $dirarchive >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 5
fi
cd ..

}


# ############################################################### #
# NGINX: dbdpg Build Phase                                        #
# ############################################################### #

build_nginx_dbdpg() {
dir=DBD-Pg
step1=0
step2=0
step3=0
step4=0


cd $dir
print "\n############################################################"
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Submodule: $dir" | tee -a ${BUILD_PATH}/${BUILD_LOG}
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

env POSTGRES_LIB=${iprefix}/pgsql/lib \
    PATH=${iprefix}/bin:$PATH ${iprefix}/perl/bin/perl Makefile.PL >> ${BUILD_PATH}/${BUILD_LOG} 2>&1

if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi  


# STEP 3
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 

# STEP 4
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make install gd failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

# final check; all 4 steps
(( ngx_dbdpg_done = step1 + step2 + step3 + step4 ))
if (( ngx_dbdpg_done == 4 )); then
   ngx_dbdpg_done=1
else
   ngx_dbdpg_done=90
fi

cd ..
rm -rf $dirarchive >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 5
fi
cd ..

}


# ############################################################### #
# NGINX: Scripts                                                  #
# ############################################################### #

# init.nginx-fcgi
# nginx-fcgi.pl
# htpasswd
build_nginx_fin() {

dir=ws-scripts
step1=0
step2=0
step3=0
step4=0


cd $dir
print "\n############################################################"
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Submodule: $dir ${OS_NAME}" | tee -a ${BUILD_PATH}/${BUILD_LOG}

# STEP 1
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 1 - Installing nginx wrappers ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

cp sbin/*nginx* sbin/htpasswd ${iprefix}/sbin
if (( $? != 0 )); then
    print "Error: cannot install nginx scripts !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step1=1
fi


# STEP 2
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 2 - Installing startup scripts ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
cp etc/* ${iprefix}/etc
if (( $? != 0 )); then
    print "Error: cannot install nginx startup scripts !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi


# STEP 3
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 2 - Installing config scripts ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
cp conf/* ${iprefix}/conf
if (( $? != 0 )); then
    print "Error: cannot install nginx startup scripts !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi

# STEP 4
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 4 - Installing docroot ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

if [[ ! -d ${iprefix}/docroot ]]; then

    mkdir -p ${iprefix}/docroot
    if (( $? != 0 )); then
        print "Error: cannot install docroot !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        step4=1
    fi
fi


# STEP 5
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 5 - Installing fastcgi temp dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

if [[ ! -d ${iprefix}/var/fastcgi_temp ]]; then

    mkdir -p ${iprefix}/var/fastcgi_temp
    if (( $? != 0 )); then
        print "Error: cannot install fastcgi_temp !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        step5=1
    fi
fi

# set smf directory
#cp -pr smf ${iprefix}/nginx/
#if (( $? != 0 )); then
#    print "Error: cannot install additional smf scripts !" |\
#      tee -a ${BUILD_PATH}/${BUILD_LOG}
#    rm /var/tmp/build.${module}
#    exit 3
#else
    step2=1
#fi


# final check; all 5 steps
(( ngx_scripts_done = step1 + step2 + step3 + step4 + step5))
if (( ngx_scripts_done == 5 )); then
   ngx_scripts_done=1
else
   ngx_scripts_done=90
fi

cd ..

}


