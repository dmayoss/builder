#!/bin/sh
#
#  SDR Development tools, Linux recording engine 
#
#  Copyright (c) 2014 Stefan Parvu (www.systemdatarecorder.org).
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software Foundation,
#  Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#  (http://www.gnu.org/copyleft/gpl.html)

# VERSION: 1.3

# ############################################################### #
# SDR Engine: Linux                                               # 
# ############################################################### #


### extract_archive
extract_archive() {

# $1 module name
# $2 dir build

modfile=$1
bfile=$2

# Debug
# echo "module name: $modfile"
# echo "archive dir: $bfile"

if [ -d $bfile ]; then
    echo "Info: Step 1 - Extracting $bfile ..." | tee -a ${BUILD_PATH}/${BUILD_LOG}
    echo "Warning: ${bfile} directory found, cleaning..." | tee -a ${BUILD_PATH}/${BUILD_LOG}

    rm -rf ${bfile}
    if [ $? -ne 0 ]; then
        echo "Error: cannot clean. Check ${modfile} , ${bfile}" | tee -a ${BUILD_PATH}/${BUILD_LOG}
        exit 3
    fi 
    gzip -dc ${bfile}.tar.gz | tar xvf - >> ${BUILD_PATH}/${BUILD_LOG}
else
    echo "Info: Step 1 - Extracting $bfile ..." | tee -a ${BUILD_PATH}/${BUILD_LOG}
    gzip -dc ${bfile}.tar.gz | tar xvf - >> ${BUILD_PATH}/${BUILD_LOG}
fi

}


### init_module
init_module() {

# $1 directory name
directory=$1

cd $directory
echo "############################################################"
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Submodule: $directory" | tee -a ${BUILD_PATH}/${BUILD_LOG}
archive_file=`ls *.tar.gz`
# Debug
#echo "Directory: $directory"
#echo "Archive: $archive_file"

# dirarchive=${archive_file%%.tar*}
dirarchive=`echo $archive_file | sed 's/\.tar.*//'`

# Debug
#echo "DirArchive: $dirarchive"

extract_archive "$directory" "$dirarchive"

cd $dirarchive

}


### clean_module
clean_module() {
cd ..
rm -rf $dirarchive >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 5
fi
cd ..

}


### perl
build_wsl_perl() {
dir=perl
step1=0
step2=0
step3=0
step4=0
step5=0
step6=0

init_module "$dir"
if [ $? -eq 0 ]; then
    step1=1
fi

# get CPAN version
cpanver=`echo $dirarchive | sed 's/perl-//'`

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Configure perl ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

if [ "$PT_NAME" = "x86_64" ]; then
    sh Configure -Doptimize='-O3' -Duselargefiles -Duse64bitall \
        -Dcf_by="support@systemdatarecorder.org"       \
        -Dcf_email="support@systemdatarecorder.org"    \
        -Dman1dir="none" -Dman3dir="none"        \
        -Dprefix=${iprefix}/perl -des >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
else
    sh Configure -Doptimize='-O3' -Duselargefiles -Duse64bitint \
        -Dcf_by="support@systemdatarecorder.org"       \
        -Dcf_email="support@systemdatarecorder.org"    \
        -Dman1dir="none" -Dman3dir="none"        \
        -Dprefix=${iprefix}/perl -des >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
fi

if [ $? -ne 0 ]; then
    echo "Error: configure perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi

# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Make perl..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi

# STEP 4
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 4 - Make test perl..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make test >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make test perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

# STEP 5
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 5 - Make install perl..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
 
if [ -d ${iprefix}/perl ]; then
    echo "Warning: perl directory found, cleaning it..." |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm -rf ${iprefix}/perl
    if [ $? -ne 0 ]; then
        echo "Error: cleaning $dir directory" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    fi
fi
 
make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make install perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step5=1
fi

           
# STEP 6
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 6 - CPAN modules" | tee -a ${BUILD_PATH}/${BUILD_LOG}

cp ${BUILDER_PREFIX}/etc/Config.pm ${iprefix}/perl/lib/${cpanver}/CPAN

for lib in Device::USB Digest::SHA Proc::Daemon Proc::PID::File \
           JSON HTTP::Response Data::UUID
do
    ${iprefix}/perl/bin/perl -MCPAN -e 'install "'$lib'"' >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
    if [ $? -ne 0 ]; then
        echo "Error: $lib installation failed !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        step6=`expr $step6 + 1`
    fi
done

# there are 7 perl modules install calls 
step6=`expr $step6 / 7`

# final check; all 6 steps
perl_done=`expr $step1 + $step2 + $step3 + $step4 + $step5 + $step6`
if [ "$perl_done" -eq 6 ]; then
   perl_done=1
else
   perl_done=90
fi

clean_module

}


### openssl
build_wsl_ossl() {
dir="openssl"
step1=0
step2=0
step3=0
step4=0

cd lib
init_module "$dir"
if [ $? -eq 0 ]; then
    step1=1
fi

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

if [ "$PT_NAME" = "x86_64" ]; then
    env PATH=${iprefix}/bin:${iprefix}/perl/bin:$PATH \
     ./Configure linux-x86_64 threads shared --prefix=${iprefix} \
     --openssldir=${iprefix}/openssl >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
elif [ "$PT_NAME" = "armv6l" ]; then
    env PATH=${iprefix}/bin:${iprefix}/perl/bin:$PATH \
     ./Configure linux-armv4 threads shared --prefix=${iprefix} \
     --openssldir=${iprefix}/openssl >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
else
    env PATH=${iprefix}/bin:${iprefix}/perl/bin:$PATH \
     ./Configure linux-elf threads shared --prefix=${iprefix} \
     --openssldir=${iprefix}/openssl >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
fi

if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi

# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

echo "Fixing SHARED_LDFLAGS flag..." >> ${BUILD_PATH}/${BUILD_LOG}
if [ "$PT_NAME" = "x86_64" ]; then
    sed "s:^SHARED_LDFLAGS=.*:SHARED_LDFLAGS=-m64 -L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib:" Makefile > Makefile.tmp
else
    sed "s:^SHARED_LDFLAGS=.*:SHARED_LDFLAGS=-m32 -L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib:" Makefile > Makefile.tmp
fi

if [ $? -ne 0 ]; then
    echo "Error: fixing SHARED_LDFLAGS Makefile failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
fi
mv Makefile.tmp Makefile


make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi

# STEP 4
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make install perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi


# final check; all 4 steps
ossl_done=`expr $step1 + $step2 + $step3 + $step4`
if [ "$ossl_done" -eq 4 ]; then
   ossl_done=1
else
   ossl_done=90
fi

clean_module

# back to root
cd ..

}


### libidn
build_wsl_idn() {
dir=idn
step1=0
step2=0
step3=0
step4=0

cd lib
init_module "$dir"
if [ $? -eq 0 ]; then
    step1=1
fi

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

if [ "$PT_NAME" = "x86_64" ]; then 
    env CC=cc CFLAGS="-O3 -I${iprefix}/include" \
        LDFLAGS="-L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib \
        -L/lib64 -L/usr/lib64" ./configure \
    --prefix=${iprefix} >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
else
    env CC=cc CFLAGS="-O3 -I${iprefix}/include" \
        LDFLAGS="-L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib\
        -L/lib -L/usr/lib" ./configure \
    --prefix=${iprefix} >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
fi

if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi  

# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 

# STEP 4
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}


make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make install perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

# final check; all 4 steps
idn_done=`expr $step1 + $step2 + $step3 + $step4`
if [ "$idn_done" -eq 4 ]; then
   idn_done=1
else
   idn_done=90
fi

clean_module

# back to root
cd ..

}


### curl
build_wsl_curl() {
dir=curl
step1=0
step2=0
step3=0
step4=0

cd lib
init_module "$dir"
if [ $? -eq 0 ]; then
    step1=1
fi

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
 
env CFLAGS="-O3" \
    CPPFLAGS="-I${iprefix}/include"   \
    LDFLAGS="-L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib" \
    ./configure --with-ssl=${iprefix} --with-libidn=${iprefix} \
     --prefix=${iprefix} --enable-cookies --enable-nonblocking \
     --disable-ldap --disable-ldaps >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi  


# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 


# STEP 4
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

if [ -f ${iprefix}/bin/curl ]; then
    echo "Warning: $dir binary found, cleaning it..." |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm ${iprefix}/bin/curl
    rm ${iprefix}/bin/curl-config
    if [ $? -ne 0 ]; then
        echo "Error: cleaning idn binary failed !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    fi

fi

if [ -d ${iprefix}/lib ]; then
    echo "Warning: lib directory found..." |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    for f in $(find ${iprefix}/lib -name '*curl*')
    do
        echo "Cleaning file: $f..." |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm $f
        if [ $? -ne 0 ]; then
            echo "Error: cleaning lib $f file failed !" |\
             tee -a ${BUILD_PATH}/${BUILD_LOG}
            rm /var/tmp/build.${module}
            exit 3
        fi
    done
fi


make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make install perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

# final check; all 4 steps
curl_done=`expr $step1 + $step2 + $step3 + $step4`
if [ "$curl_done" -eq 4 ]; then
   curl_done=1
else
   curl_done=90
fi

clean_module

# back to root
cd ..

}


### perl WWW::Curl
build_wsl_wcurl() {

#  perl Makefile.PL
#  Modify the Makefile to include -L/opt/sdr/lib -R/opt/sdr/lib
#
#  LDDLFLAGS = -L/lib64 -L/usr/lib64 -L/opt/sdr/lib
#  LDFLAGS = -L/lib64 -L/usr/lib64 -L/opt/sdr/lib
#
#  make
#  make install

dir=WWW-Curl
step1=0
step2=0
step3=0
step4=0

cd lib
init_module "$dir"
if [ $? -eq 0 ]; then
    step1=1
fi

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}


env PATH=${iprefix}/bin:$PATH ${iprefix}/perl/bin/perl Makefile.PL >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
#sed -i.backup '/^LDFLAGS =/ {s/.*/& \-L\/lib64 \-L\/usr\/lib64 \-L\/opt\/sdr\/lib/}' Makefile
# LDFLAGS =  -fstack-protector -L/usr/local/lib
sed "s:^LDFLAGS =  -fstack-protector -L/usr/local/lib:LDFLAGS = -fstack-protector -L${iprefix}/lib -L/usr/local/lib -Wl,-rpath -Wl,${iprefix}/lib:" Makefile > Makefile.tmp

mv Makefile.tmp Makefile

#sed -i.backup '/^LDDLFLAGS =/ {s/.*/& \-L\/lib64 \-L\/usr\/lib64 \-L\/opt\/sdr\/lib/ -Wl,-rpath -Wl,${iprefix}/lib}' Makefile
sed "s:^LDDLFLAGS = -shared -O3 -L/usr/local/lib -fstack-protector:LDDLFLAGS = -shared -O3 -fstack-protector -L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib:" Makefile > Makefile.tmp
mv Makefile.tmp Makefile

if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi  


# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 


# STEP 4
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make install perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

## final check; all 4 steps
wwwcurl_done=`expr $step1 + $step2 + $step3 + $step4`
if [ "$wwwcurl_done" -eq 4 ]; then
   wwwcurl_done=1
else
   wwwcurl_done=90
fi

clean_module

# back to root
cd ..

}


### configuration settings
build_wsl_scripts() {

dir=bin
step1=0
step2=0

cd ${dir}
echo "############################################################"
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Submodule: $dir ${OS_NAME}" | tee -a ${BUILD_PATH}/${BUILD_LOG}


# STEP 1
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 1 - Installing setenv ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

 bin/wslogger ${iprefix}/e}/bin
if [ $? -ne 0 ]; then
    echo "Error: cannot install wslogger bin !" |\
      tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
fi


# set etc settings
cp etc/wslogger.json * ${iprefix}/etc
cp etc/wslogger.json ${iprefix}/etc
cp etc/wslog ${iprefix}/etc
if [ $? -ne 0 ]; then
    echo "Error: cannot install etc settings !" |\
      tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
fi

# final check; all 2 steps
wcs_done=`expr $step1 + $step2`
if [ "$wcs_done" -eq 2 ]; then
   wcs_done=1
else
   wcs_done=0
fi

# set man pages
if [ ! -d ${iprefix}/man ]; then
    mkdir ${iprefix}/man
fi

cp -pr man/* ${iprefix}/man
if [ $? -ne 0 ]; then
    echo "Error: cannot install man pages !" |\
      tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
fi

# set release notes
cp release.notes.${OS_NAME} ${iprefix}/release.notes
if [ $? -ne 0 ]; then
    echo "Error: cannot install release.notes !" |\
      tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
fi

# set README 
cp README.${OS_NAME} ${iprefix}
if [ $? -ne 0 ]; then
    echo "Error: cannot install README.${OS_NMAE} !" |\
      tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
fi

# set log directory
if [ ! -d ${iprefix}/log ]; then
    # setup daily log
    mkdir -p ${iprefix}/log/daily
    if [ $? -ne 0 ]; then
        echo "Error: cannot set log/daily director !" |\
          tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    fi

    # setup current log
    mkdir -p ${iprefix}/log/current
    if [ $? -ne 0 ]; then
        echo "Error: cannot set log/current director !" |\
          tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    fi
else
    # we have log dir, check daily, raw
    if [ ! -d ${iprefix}/log/daily ]; then 
        mkdir ${iprefix}/log/daily
        if [ $? -ne 0 ]; then
            echo "Error: cannot set log/daily director !" |\
             tee -a ${BUILD_PATH}/${BUILD_LOG}
            rm /var/tmp/build.${module}
            exit 3
        fi
    fi

    if [ ! -d ${iprefix}/log/current ]; then 
        mkdir ${iprefix}/log/current
        if [ $? -ne 0 ]; then
            echo "Error: cannot set log/current director !" |\
             tee -a ${BUILD_PATH}/${BUILD_LOG}
            rm /var/tmp/build.${module}
            exit 3
        fi
    fi
fi


}


### testing
test_wsl_scripts() {

}
