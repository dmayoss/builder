#!/bin/sh
#
#  SDR Development tools, builder the master script engine 
#
#  Copyright (c) 2014 Stefan Parvu (www.systemdatarecorder.org).
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software Foundation,
#  Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#  (http://www.gnu.org/copyleft/gpl.html)

# VERSION: 1.1

usage() {

cat << END
Usage: $0 [options] rec|rep|nginx version
Options:
  -h help
  -d database: mariadb | pgsql
  -a all: php, pecl, memcached, libmcrypt
  -p prefix
  -t test mode
  -m module

Modules:
   perl, openssl, idn, curl,  wcurl, sysstat, nrec, webrec
   scripts, rep1, rep2, rep3, rep4, rep5, nginx, nginxfin
   mariadb, pgsql, php, ngxfin

  eg, builder rec 0.73                            # build recording 0.73
      builder rep 0.71                            # build reporting 0.71
      builder nginx 0.8.54                        # build nginx 0.8.54
      builder -p /opt/www nginx 1.2.6             # build nginx 0.8.54
      builder -a -d mariadb nginx 1.4.5

      rec 0.73  - SDR Recording package, legacy release
      rec 0.74  - SDR Recording package, stable release
      rec 0.75  - SDR Recording package, beta release
      rep 0.75  - SDR Reporting package, beta release
      nginx 1.2.6 - NGINX HTTP Server, legacy release
      nginx 1.4.5 - NGINX HTTP Server, stable release

Notes:
   Make sure you have defined WORKSPACE_BUILDER variable before running
   builder.
END
exit 1
}


# ######### #
# MAIN BODY #
# ######### #

## modules

## recording
perl_sem=0
lidn_sem=0
lcrl_sem=0
lwcl_sem=0
wrec_sem=0
recs_sem=0
test_sem=0
nrec_sem=0
ossl_sem=0
syss_sem=0
rec1_sem=0

idn_done=0
perl_done=0
ossl_done=0
curl_done=0
wrec_done=0
recs_done=0
nrec_done=0
tests_done=0
wwwcurl_done=0
sysstat_done=0
rec_ssh2_done=0
rec_perlssh2_done=0
libxml2_done=0
perlxml_done=0
##

## reporting
rep1_sem=0
rep2_sem=0
rep3_sem=0
rep4_sem=0
rep5_sem=0
rep6_sem=0
nginx_sem=0
fcgiwrap_sem=0
jpeg_sem=0
rserve_sem=0
pdq_sem=0
repfin_sem=0
ranalysis_sem=0
perltt_sem=0

rep_idn_done=0
rep_ssh2_done=0
rep_perlssh2_done=0
rep_curl_done=0
rep_pkgc_done=0
rep_pixm_done=0
rep_libpng_done=0
rep_libjpeg_done=0
rep_freetype_done=0
rep_fontconfig_done=0
rep_cairo_done=0
rep_ffi_done=0
rep_harfbuzz_done=0
rep_glib_done=0
rep_pango_done=0
rep_rrd_done=0
rep_gett_done=0
rep_ossl_done=0
rep_perl_done=0
rep_iconv_done=0
rep_libxml2_done=0
rep_perllxml_done=0
rep_rdln_done=0
rep_gd_done=0
rep_perlmodules_done=0
rep_perlnetdns_done=0
rep_dbdpg_done=0
rep_pcre_done=0
rep_fcgi_done=0
rep_fcgiw_done=0
rep_ws_done=0
rep_rsts_done=0
rep_rcairo_done=0
rep_rggplot2_done=0
rep_pdq_done=0
rep_wcurl_done=0
rep_wsscripts_done=0
rep_tests_done=0
rep_fin_done=0
rep_rserve_done=0
rep_ranalysis_done=0
rep_perltt_done=0
##

## nginx
nginxall_sem=0
nginxfin_sem=0
php_sem=0
mariadb_sem=0
pgsql_sem=0

ngx_perl_done=0
ngx_conv_done=0
ngx_libxml2_done=0
ngx_libpng_done=0
ngx_libjpeg_done=0
ngx_freetype_done=0
ngx_fontconfig_done=0
ngx_ossl_done=0
ngx_gd_done=0
ngx_perlmodules_done=0
ngx_dbdpg_done=0
ngx_pcre_done=0
ngx_fcgi_done=0
ngx_fcgiw_done=0
ngx_ws_done=0
ngx_mariadb_done=0
ngx_mcd_done=0
ngx_idn_done=0
ngx_curl_done=0
ngx_php_done=0
ngx_event_done=0
ngx_scripts_done=0
##

# Source Global SDR Settings
PWD=`dirname $0`
. ${PWD}/setenv

while getopts ":ahm:p:d:t" arg
do
    case "${arg}" in

    a)
        nginxall_sem=1
    ;;

    d)
        dbtype=$OPTARG

        case "$dbtype" in
            mariadb)
                mariadb_sem=1
            ;;

            pgsql)
                pgsql_sem=1
            ;;

            *)
                echo "Not supported db module!"
                usage
            ;;
        esac
    ;;


    h)
        usage
    ;;

    p)
        iprefix=$OPTARG
        if [ ! -d $iprefix ]; then
            usage
        fi
    ;;

    m)
        module=$OPTARG
        case "$module" in
            perl)
                perl_sem=1
            ;;

            openssl)
                ossl_sem=1
            ;;

            idn)
                lidn_sem=1
            ;;

            curl)
                lcrl_sem=1
            ;;
 
            gd)
                lgd_sem=1
            ;;

            wcurl)
                lwcl_sem=1
            ;;

            nrec)
                nrec_sem=1
            ;;

            sysstat)
              if [ "$OS_NAME" != "Linux" ]; then
                echo "Error: sysstat is a Linux specific pkg !\n"
                exit 1
              fi
              syss_sem=1
            ;;

            webrec)
                wrec_sem=1
            ;;

            scripts)
                recs_sem=1
            ;;

            rec1)
		rec1_sem=1
            ;;

            rep1)
                rep1_sem=1
            ;;

            rep2)
                rep2_sem=1
            ;;

            rep3)
                rep3_sem=1
            ;;

            rep4)
                rep4_sem=1
            ;;

            rep5)
                rep5_sem=1
            ;;

            rep6)
                rep6_sem=1
            ;;

            tt)
                perltt_sem=1
            ;;

            nginx)
                nginx_sem=1
            ;;

            fcgiwrap)
                fcgiwrap_sem=1
            ;;

            libjpeg)
                jpeg_sem=1
            ;;

            rserve)
                rserve_sem=1
            ;;

            ranalysis)
                ranalysis_sem=1
            ;;

            pdq)
                pdq_sem=1
            ;;

            repfin)
                repfin_sem=1
            ;;

            ngxfin)
                nginxfin_sem=1
            ;;
                   
            php)
                php_sem=1
            ;;

            mariadb)
                mariadb_sem=1
            ;;

            pgsql)
                pgsql_sem=1
            ;;

            *)
                echo "Not supported module!"
                usage
            ;;
        esac
    ;;
    
    t)
        test_sem=1
    ;;

    esac
done

shift `expr $OPTIND - 1`

# check arguments
if [ $# -lt 2 -o $# -gt 2 ]; then
    usage
fi

version=$2
module=$1


# check workspace variable

if [ ! -z "$WORKSPACE_BUILDER" ]; then
   WORKSPACE="${WORKSPACE_BUILDER}"
else
   usage
fi


# Status File
STATFILE="build.${module}.${PT_NAME}.${HOSTNAME}"
BUILD_LOG="${module}.${PT_NAME}.${HOSTNAME}.${version}.log"

# status file
if [ -f /var/tmp/${STATFILE} ]; then
    echo "Error: already running, status file: build.${module}.${PT_NAME}.${HOSTNAME}"
    exit 1
else
    touch /var/tmp/${STATFILE}
fi


case "$OS_NAME" in
    SunOS)
         
	# source here the engine for Solaris
        case "$module" in
	 rec)

             iprefix=${iprefix:-/opt/sdr}
             iuser=sdr

             WORKSPACE="${WORKSPACE_BUILDER}/SDR"
             case "$version" in
                 0.73*)
                  . ${PWD}/engine.rec.solaris.073
                  ;;

                 0.74*)
                  . ${PWD}/engine.rec.solaris.074
                  ;;

                 1.0*)
                  . ${PWD}/engine.rec.solaris.10x
                  ;;
               
                 *)
                   usage
                 ;;
             esac
         ;;

         rep)
             iprefix=${iprefix:-/opt/sdr/report}
             iuser=sdr

             WORKSPACE="${WORKSPACE_BUILDER}/SDR"

             case "$version" in
                 0.74)
                  . ${PWD}/engine.rep.solaris.074
                  ;;

                 1.0x)
                  . ${PWD}/engine.rep.solaris.10x
                  ;;

                 *)
                   usage
                 ;;
             esac

         ;;
         
	 nginx)

             iprefix=${iprefix:-/opt/www}
             if [ "$iprefix" = "/opt/www" ]; then
                 iuser=www
             else
                 if [ "$iprefix" = "/opt/nginx" ]; then
                     iuser=nginx
                 else
                     iuser=nobody
                 fi
             fi

             WORKSPACE=~${WORKSPACE_USER}/workspace/nginx

             case "$version" in
                 0.8.54)
                  . ${PWD}/engine.nginx.solaris.0854
                  ;;

                 1.2.*)
                  . ${PWD}/engine.nginx.solaris.12x
                 ;;

                 1.4.*)
                  . ${PWD}/engine.nginx.solaris.14x
                 ;;
 
                 *)
                   usage
                 ;;
             esac
         ;;

         *)
            usage
         ;;
        esac
    ;;

    Linux)

        case "$module" in
         rec)

             iprefix=${iprefix:-/opt/sdr}
             iuser=sdr

             WORKSPACE="${WORKSPACE_BUILDER}/SDR"


             #echo "Debug: iprefix=$iprefix"
             #echo "       iuser=$iuser"
             #echo "       workspace=$WORKSPACE"

             case "$version" in
                 0.73*)
                  . ${PWD}/engine.rec.linux.073
                  ;;
               
                 0.74*)
                  . ${PWD}/engine.rec.linux.074
                  ;;

                 1.0*)
                  . ${PWD}/engine.rec.linux.10x
                  ;;

                 *)
                   usage
                 ;;
             esac
         ;;

         rep)

             iprefix=${iprefix:-/opt/sdr/report}
             iuser=sdr
             
             WORKSPACE="${WORKSPACE_BUILDER}/SDR"

             case "$version" in
                 0.74*)
                  . ${PWD}/engine.rep.linux.074
                  ;;
               
                 1.0*)
                  . ${PWD}/engine.rep.linux.10x
                  ;;

                 *)
                   usage
                 ;;
             esac
         ;;
         
	 nginx)

             iprefix=${iprefix:-/opt/www}
             if [ "$iprefix" = "/opt/www" ]; then
                 iuser=www
             else
                 if [ "$iprefix" = "/opt/nginx" ]; then
                     iuser=nginx
                 else
                     iuser=nobody
                 fi
             fi

             WORKSPACE=~${WORKSPACE_USER}/workspace/nginx

             case "$version" in
                 0.8.54)
                  . ${PWD}/engine.nginx.linux.0854
                  ;;

                 1.2.*)
                  . ${PWD}/engine.nginx.linux.12x
                 ;;
 
                 1.4.*)
                  . ${PWD}/engine.nginx.linux.14x
                 ;;

                 *)
                   usage
                 ;;
             esac
         ;;

         *)
            usage
         ;;
        esac

    ;;


    FreeBSD)

        case "$module" in
         rec)

             iprefix=${iprefix:-/opt/sdr}
             iuser=sdr

             WORKSPACE="${WORKSPACE_BUILDER}/SDR"

             case "$version" in
                 1.0*)
                  . ${PWD}/engine.rec.freebsd.10x
                  ;;

                 *)
                   usage
                 ;;
             esac
         ;;

         rep)

             iprefix=${iprefix:-/opt/sdr/report}
             iuser=sdr
             
             WORKSPACE="${WORKSPACE_BUILDER}/SDR"

             case "$version" in
                 1.0*)
                  . ${PWD}/engine.rep.freebsd.10x
                  ;;

                 *)
                   usage
                 ;;
             esac
         ;;
         
	 nginx)

             iprefix=${iprefix:-/opt/www}
             if [ "$iprefix" = "/opt/www" ]; then
                 iuser=www
             else
                 if [ "$iprefix" = "/opt/nginx" ]; then
                     iuser=nginx
                 else
                     iuser=nobody
                 fi
             fi

             WORKSPACE="${WORKSPACE_BUILDER}/nginx"

             case "$version" in
                 1.4.*)
                  . ${PWD}/engine.nginx.freebsd.14x
                 ;;

                 *)
                   usage
                 ;;
             esac
         ;;

         *)
            usage
         ;;
        esac

    ;;

    *)
        WORKSPACE=
	echo "Not supported module!"
        usage
    ;;

esac

if [ ! -d ${WORKSPACE} ]; then
    echo "Error: Invalid workspace structure: build"
    exit 1
fi

if [ -d ${WORKSPACE}/${module}/${version} ]; then
    cd ${WORKSPACE}/${module}/${version}
else
    echo "Error: Invalid workspace structure: wrong module/version"
    exit 1
fi


if [ "$OS_NAME" = "SunOS" ]; then
    start=`nawk 'BEGIN{print srand()}'`
else
    start=`date +%s`
fi

echo ""
echo "#################################################################"
echo "# SDR Build Engine                                              #"
echo "#################################################################"
echo "# Start  : $(date)"
echo "# Target : ${OS_NAME} ${PT_NAME}"
if [ $nginxall_sem -eq 1 -a $mariadb_sem -eq 1 ]; then
    echo "# Module : $module, mariadb, php"
elif [ $nginxall_sem -eq 1 -a $pgsql_sem -eq 1 ]; then
    echo "# Module : $module, pgsql, php"
else
    echo "# Module : $module"
fi
echo "# Version: $version"
echo "#################################################################"

#echo "Debug: perl_mod=$perl_mod, idn_mod=$idn_mod"

case "$module" in
 rec)
    if [ "$perl_sem" -eq 0 -a "$ossl_sem" -eq 0     \
          -a "$lidn_sem" -eq 0 -a "$syss_sem" -eq 0 \
          -a "$lcrl_sem" -eq 0 -a "$lwcl_sem" -eq 0 \
          -a "$wrec_sem" -eq 0 -a "$nrec_sem" -eq 0 \
          -a "$recs_sem" -eq 0 -a "$test_sem" -eq 0 \
          -a "$rec1_sem" -eq 0 ];then
        echo "" > ${BUILD_PATH}/${BUILD_LOG}
        build_rec_perl
        build_rec_ossl
        # build_rec_ssh2
        # build_rec_perlssh2
        build_rec_idn
        build_rec_libxml2
        build_rec_xmllibxml
        build_rec_curl
        build_rec_wcurl
        if [ "${OS_NAME}" = "Linux" ]; then
            build_rec_sysstat
        fi
   
        build_rec_webrec
        build_rec_scripts
        test_rec_scripts
    else
        if [ "$perl_sem" -eq 1 ]; then
          echo "" > ${BUILD_PATH}/${BUILD_LOG}
          build_rec_perl
        fi

        if [ "$ossl_sem" -eq 1 ]; then
          echo "" > ${BUILD_PATH}/${BUILD_LOG}
          build_rec_ossl
        fi
     
        if [ "$rec1_sem" -eq 1 ]; then
          echo "" > ${BUILD_PATH}/${BUILD_LOG}
          build_rec_perlssh2
        fi

        if [ "$lidn_sem" -eq 1 ]; then
            echo "" > ${BUILD_PATH}/${BUILD_LOG}
            build_rec_idn
        fi

        if [ "$lcrl_sem" -eq 1 ]; then
            echo "" > ${BUILD_PATH}/${BUILD_LOG}
            build_rec_curl
        fi

        if [ "$lwcl_sem" -eq 1 ]; then
            echo "" > ${BUILD_PATH}/${BUILD_LOG}
            build_rec_wcurl
        fi

        if [ "$syss_sem" -eq 1 ]; then
            if [ "${OS_NAME}" = "Linux" ]; then
                echo "" > ${BUILD_PATH}/${BUILD_LOG}
                build_rec_sysstat
            fi
        fi

        if [ "$nrec_sem" -eq 1 ]; then
            echo "" > ${BUILD_PATH}/${BUILD_LOG}
            build_rec_nrec
        fi

        if [ "$wrec_sem" -eq 1 ]; then
            echo "" > ${BUILD_PATH}/${BUILD_LOG}
            build_rec_webrec
        fi

        if [ "$recs_sem" -eq 1 ]; then
            echo "" > ${BUILD_PATH}/${BUILD_LOG}
            build_rec_scripts
        fi

        if [ "$test_sem" -eq 1 ]; then
            echo "" > ${BUILD_PATH}/${BUILD_LOG}
            test_rec_scripts
        fi

    fi

 ;;

 rep)

    if [ "$rep1_sem" -eq 0 -a "$rep2_sem" -eq 0  \
          -a "$rep3_sem" -eq 0 -a "$rep4_sem" -eq 0 \
          -a "$rep5_sem" -eq 0 -a "$rep6_sem" -eq 0 \
          -a "$jpeg_sem" -eq 0 -a "$fcgiwrap_sem" -eq 0 \
          -a "$rserve_sem" -eq 0 -a "$pdq_sem" -eq 0 \
          -a "$repfin_sem" -eq 0 -a "$ranalysis_sem" -eq 0 \
          -a "$perltt_sem" -eq 0 -a "$nginx_sem" -eq 0 ]; then
        echo "" > ${BUILD_PATH}/${BUILD_LOG}
        build_rep_perl
        build_rep_ossl
        build_rep_idn
        if [ "${OS_NAME}" = "Linux" ]; then
            build_rep_gettext 0
            build_rep_iconv
            build_rep_gettext 1
        fi
        build_rep_libxml2
        build_rep_xmllibxml
        build_rep_readline
        build_rep_curl
        if [ "${OS_NAME}" = "Linux" ]; then
            build_rep_ffi
            build_rep_glib
        fi
        build_rep_wcurl
        build_rep_pcre
        build_rep_fcgi
        build_rep_ws
        build_rep_fcgiwrap
        build_rep_ws_scripts
        if [ "${OS_NAME}" = "Linux" ]; then
            build_rep_pkgconfig
        fi
        build_rep_harfbuzz
        build_rep_libjpeg
        build_rep_libpng
        build_rep_pixman
        build_rep_freetype
        build_rep_fontconfig
        build_rep_cairo
        build_rep_pango
        build_rep_rrd
        build_rep_R
        build_rep_rcairo
        build_rep_rggplot2
        build_rep_rserve
        build_rep_ranalysis
        build_rep_pdq
        build_rep_fin

    elif [ "$rep1_sem" -eq 1 ]; then
        echo "" > ${BUILD_PATH}/${BUILD_LOG}
        build_rep_perl
        build_rep_ossl
        build_rep_ssh2
        build_rep_gettext
        build_rep_iconv
        build_rep_gettext
        build_rep_readline
        build_rep_libxml2
        build_rep_xmllibxml
        build_rep_idn
        build_rep_curl
        build_rep_harfbuzz
        build_rep_ffi
        build_rep_glib
        build_rep_perlssh2
        build_rep_wcurl
        build_rep_pcre
        build_rep_fcgi
        build_rep_ws
        build_rep_fcgiwrap
        build_rep_ws_scripts
        build_rep_fin

    elif [ "$rep2_sem" -eq 1 ]; then
        echo "" > ${BUILD_PATH}/${BUILD_LOG}
        build_rep_ffi
        build_rep_glib
        build_rep_ossl
        build_rep_gettext
        build_rep_iconv
        build_rep_gettext
        build_rep_readline
        build_rep_libxml2
        build_rep_xmllibxml
        build_rep_pkgconfig
        build_rep_harfbuzz
        build_rep_libjpeg
        build_rep_libpng
        build_rep_pixman
        build_rep_freetype
        build_rep_fontconfig
        build_rep_cairo
        build_rep_pango
        build_rep_rrd

    elif [ "$rep3_sem" -eq 1 ]; then
        echo "" > ${BUILD_PATH}/${BUILD_LOG}
        # build_rep_R
        build_rep_rcairo
        build_rep_rggplot2

    elif [ "$rep4_sem" -eq 1 ]; then
        echo "" > ${BUILD_PATH}/${BUILD_LOG}
        build_rep_pdq

    elif [ "$rep5_sem" -eq 1 ]; then
        echo "" > ${BUILD_PATH}/${BUILD_LOG}
        build_rep_rggplot2

    elif [ "$rep6_sem" -eq 1 ]; then
        echo "" > ${BUILD_PATH}/${BUILD_LOG}
        build_rep_fin

    elif [ "$nginx_sem" -eq 1 ]; then
        echo "" > ${BUILD_PATH}/${BUILD_LOG}
        build_rep_ws
        build_rep_fcgiwrap
        build_rep_ws_scripts

    elif [ "$perltt_sem" -eq 1 ]; then
        echo "" > ${BUILD_PATH}/${BUILD_LOG}
        build_rep_perltt

    elif [ "$fcgiwrap_sem" -eq 1 ]; then
        echo "" > ${BUILD_PATH}/${BUILD_LOG}
        build_rep_fcgiwrap

    elif [ "$jpeg_sem" -eq 1 ]; then
        echo "" > ${BUILD_PATH}/${BUILD_LOG}
        build_rep_libjpeg

    elif [ "$rserve_sem" -eq 1 ]; then
        echo "" > ${BUILD_PATH}/${BUILD_LOG}
        build_rep_rserve

    elif [ "$ranalysis_sem" -eq 1 ]; then
        echo "" > ${BUILD_PATH}/${BUILD_LOG}
        build_rep_ranalysis

    elif [ "$pdq_sem" -eq 1 ]; then
        echo "" > ${BUILD_PATH}/${BUILD_LOG}
        build_rep_pdq

    elif [ "$repfin_sem" -eq 1 ]; then
        echo "" > ${BUILD_PATH}/${BUILD_LOG}
        build_rep_fin
    fi
 ;;


 nginx)

    # build world
    if [ $nginxall_sem -eq 0 -a $mariadb_sem -eq 0 -a \
          $pgsql_sem -eq 0 -a $php_sem -eq 0 -a $nginxfin_sem -eq 0 ]; then
        echo "" > ${BUILD_PATH}/${BUILD_LOG}
        build_nginx_perl
        build_nginx_ossl
        build_nginx_gettext
        build_nginx_iconv
        build_nginx_gettext
        build_nginx_libxml2
        build_nginx_readline
        build_nginx_libjpeg
        build_nginx_libpng
        build_nginx_freetype
        build_nginx_fontconfig
        build_nginx_gd
        build_nginx_perlmods
        build_nginx_pcre
        build_nginx_fcgi
        build_nginx_ws
        build_nginx_fcgiwrap
        build_nginx_fin

    # nginx + pgsql
    elif [ $nginxall_sem -eq 0 -a $mariadb_sem -eq 0 -a \
            $pgsql_sem -eq 1 -a $php_sem -eq 0 -a $nginxfin_sem -eq 0 ]; then
        echo "" > ${BUILD_PATH}/${BUILD_LOG}
        build_nginx_perl
        build_nginx_ossl
        build_nginx_gettext
        build_nginx_iconv
        build_nginx_gettext
        build_nginx_libxml2
        build_nginx_readline
        build_nginx_libjpeg
        build_nginx_libpng
        build_nginx_freetype
        build_nginx_fontconfig
        build_nginx_gd
        build_nginx_perlmods
        build_nginx_pcre
        build_nginx_fcgi
        build_nginx_ws
        build_nginx_fcgiwrap
        build_nginx_pgsql
        build_nginx_dbdpg
        build_nginx_fin

    # nginx + mariadb
    elif [ $nginxall_sem -eq 0 -a $mariadb_sem -eq 1 -a \
            $pgsql_sem -eq 0 -a $php_sem -eq 0 -a $nginxfin_sem -eq 0 ]; then

        echo "" > ${BUILD_PATH}/${BUILD_LOG}
        build_nginx_perl
        build_nginx_ossl
        build_nginx_gettext
        build_nginx_iconv
        build_nginx_gettext
        build_nginx_libxml2
        build_nginx_readline
        build_nginx_libjpeg
        build_nginx_libpng
        build_nginx_freetype
        build_nginx_fontconfig
        build_nginx_gd
        build_nginx_perlmods
        build_nginx_pcre
        build_nginx_fcgi
        build_nginx_ws
        build_nginx_fcgiwrap
        build_nginx_pgsql
        build_nginx_fin

    # all + mariadb
    elif [ $nginxall_sem -eq 1 -a $mariadb_sem -eq 1 ]; then
        echo "" > ${BUILD_PATH}/${BUILD_LOG}
        build_nginx_perl
        build_nginx_ossl
        build_nginx_gettext
        build_nginx_iconv
        build_nginx_gettext
        build_nginx_libxml2
        build_nginx_readline
        build_nginx_libjpeg
        build_nginx_libpng
        build_nginx_freetype
        build_nginx_fontconfig
        build_nginx_gd
        build_nginx_perlmods
        build_nginx_pcre
        build_nginx_fcgi
        build_nginx_ws
        build_nginx_fcgiwrap
        build_nginx_event
        build_nginx_idn
        build_nginx_curl
        build_nginx_mariadb
        build_nginx_mcd
        build_nginx_mcrypt
        build_nginx_php
        build_nginx_peclmcd
        build_nginx_fin

    # all + pgsql
    elif [ $nginxall_sem -eq 1 -a $pgsql_sem -eq 1 ]; then
        echo "" > ${BUILD_PATH}/${BUILD_LOG}
        build_nginx_perl
        build_nginx_ossl
        build_nginx_gettext
        build_nginx_iconv
        build_nginx_gettext
        build_nginx_libxml2
        build_nginx_readline
        build_nginx_libjpeg
        build_nginx_libpng
        build_nginx_freetype
        build_nginx_fontconfig
        build_nginx_gd
        build_nginx_perlmods
        build_nginx_pcre
        build_nginx_fcgi
        build_nginx_ws
        build_nginx_fcgiwrap
        build_nginx_event
        build_nginx_idn
        build_nginx_curl
        build_nginx_pgsql
        build_nginx_dbdpg
        build_nginx_mcd
        build_nginx_mcrypt
        build_nginx_php
        build_nginx_peclmcd
        build_nginx_fin

    # build mariadb server
    elif [ $mariadb_sem -eq 1 ]; then
        echo "" > ${BUILD_PATH}/${BUILD_LOG}
        build_nginx_mariadb

    # build postgresql server
    elif [ $pgsql_sem -eq 1]; then
        echo "" > ${BUILD_PATH}/${BUILD_LOG}
        build_nginx_pgsql
        build_nginx_dbdpg

    # finalise
    elif [ $nginxfin_sem -eq 1]; then
        echo "" > ${BUILD_PATH}/${BUILD_LOG}
        build_nginx_fin

    fi

 ;;

 *) 
    usage
 ;;

esac


# FINAL INTEGRATION MESSAGE

echo "#################################################################"
echo "# SUMMARY"
echo "# Target:  ${OS_NAME} ${PT_NAME}"
echo "# Compiler: ${COMPILER}"
echo "# Built on: ${OS_NAME} ${KERNEL}"
echo "# SDR Module: ${module}"
echo "# Version: ${version}"
echo "# Build Date: "$(date)"

case "$module" in

 rec)

    if [ $perl_done -eq 1 ];then
        echo "# PERL SUBSYSTEM: built and integrated"
    else
        if [ $perl_done -eq 90 ];then
            echo "# PERL SUBSYSTEM: not integrated"
        fi
    fi

    if [ $ossl_done -eq 1 ];then
        echo "# OPENSSL SUBSYSTEM: built and integrated"
    else
        if [ $ossl_done -eq 90 ];then
            echo "# OPENSSL SUBSYSTEM: not integrated"
        fi
    fi

    if [ $rec_ssh2_done -eq 1 ];then
        echo "# LIBSSH2 SUBSYSTEM: built and integrated"
    else
        if [ $rec_ssh2_done -eq 90 ];then
            echo "# LIBSSH2 SUBSYSTEM: not integrated"
        fi
    fi

    if [ $rec_perlssh2_done -eq 1 ];then
        echo "# Net::SSH2 SUBSYSTEM: built and integrated"
    else
        if [ $rec_perlssh2_done -eq 90 ];then
            echo "# Net::SSH2 SUBSYSTEM: not integrated"
        fi
    fi

    if [ $idn_done -eq 1 ];then
        echo "# IDN SUBSYSTEM: built and integrated"
    else
        if [ $idn_done -eq 90 ];then
            echo "# IDN SUBSYSTEM: not integrated"
        fi
    fi

    if [ $curl_done -eq 1 ];then
        echo "# CURL SUBSYSTEM: built and integrated"
    else
        if [ $curl_done -eq 90 ];then
            echo "# CURL SUBSYSTEM: not integrated"
        fi
    fi

    if [ "$OS_NAME" = "Linux" ]; then
        if [ $sysstat_done -eq 1 ];then
            echo "# SYSSTAT SUBSYSTEM: built and integrated"
        else
            if [ $sysstat_done -eq 90 ];then
                echo "# SYSSTAT SUBSYSTEM: not integrated"
            fi
        fi
    fi

    if [ $wwwcurl_done -eq 1 ];then
        echo "# WCURL SUBSYSTEM: built and integrated"
    else
        if [ $wwwcurl_done -eq 90 ];then
            echo "# WCURL SUBSYSTEM: not integrated"
        fi
    fi


    if [ "$OS_NAME" = "Linux" ]; then
        if [ $nrec_done -eq 1 ];then
            echo "# NICREC SUBSYSTEM: built and integrated"
        else
            if [ $nrec_done -eq 90 ];then
                echo "# NICREC SUBSYSTEM: not integrated"
            fi
        fi
    fi


    if [ $wrec_done -eq 1 ];then
        echo "# WEBREC SUBSYSTEM: built and integrated"
    else
        if [ $wrec_done -eq 90 ];then
            echo "# WEBREC SUBSYSTEM: not integrated"
        fi
    fi


    if [ $recs_done -eq 1 ];then
        echo "# RECORDERS: built and integrated"
    else
        if [ $recs_done -eq 90 ];then
            echo "# RECORDERS: not integrated"
        fi
    fi

    if [ $tests_done -eq 1 ];then
        echo "# TESTS: ok"
    else
        if [ $tests_done -eq 90 ];then
            echo "# TESTS: failed"
        fi
    fi

 ;;

 rep)

    if [ $rep_perl_done -eq 1 ];then
        echo "# PERL SUBSYSTEM: built and integrated"
    else
        if [ $rep_perl_done -eq 90 ];then
            echo "# PERL SUBSYSTEM: not integrated"
        fi
    fi

    if [ $rep_ossl_done -eq 1 ];then
        echo "# OPENSSL SUBSYSTEM: built and integrated"
    else
        if [ $rep_perl_done -eq 90 ];then
            echo "# OPENSSL SUBSYSTEM: not integrated"
        fi
    fi

    if [ $rep_gett_done -eq 1 ];then
        echo "# GETTEXT SUBSYSTEM built and integrated"
    else
        if [ $rep_gett_done -eq 90 ];then
            echo "# GETTEXT SUBSYSTEM not integrated"
        fi
    fi

    if [ $rep_iconv_done -eq 1 ];then
        echo "# ICONV SUBSYSTEM built and integrated"
    else
        if [ $rep_iconv_done -eq 90 ];then
            echo "# ICONV SUBSYSTEM not integrated"
        fi
    fi

    if [ $rep_libxml2_done -eq 1 ];then
        echo "# LIBXML2 SUBSYSTEM built and integrated"
    else
        if [ $rep_libxml2_done -eq 90 ];then
            echo "# LIBXML2 SUBSYSTEM not integrated"
        fi
    fi

    if [ $rep_perllxml_done -eq 1 ];then
        echo "# XML::LIBXML SUBSYSTEM built and integrated"
    else
        if [ $rep_perllxml_done -eq 90 ];then
            echo "# XML::LIBXML SUBSYSTEM not integrated"
        fi
    fi

    if [ $rep_rdln_done -eq 1 ];then
        echo "# READLINE SUBSYSTEM built and integrated"
    else
        if [ $rep_rdln_done -eq 90 ];then
            echo "# READLINE SUBSYSTEM not integrated"
        fi
    fi

    if [ $rep_idn_done -eq 1 ];then
        echo "# LIBIDN SUBSYSTEM built and integrated"
    else
        if [ $rep_idn_done -eq 90 ];then
            echo "# LIBIDN SUBSYSTEM not integrated"
        fi
    fi

    if [ $rep_curl_done -eq 1 ];then
        echo "# LIBCURL SUBSYSTEM built and integrated"
    else
        if [ $rep_curl_done -eq 90 ];then
            echo "# LIBCURL SUBSYSTEM not integrated"
        fi
    fi

    if [ $rep_ssh2_done -eq 1 ];then
        echo "# LIBSSH2 SUBSYSTEM built and integrated"
    else
        if [ $rep_ssh2_done -eq 90 ];then
            echo "# LIBSSH2 SUBSYSTEM not integrated"
        fi
    fi

    if [ $rep_perlssh2_done -eq 1 ];then
        echo "# Net::SSH2 SUBSYSTEM built and integrated"
    else
        if [ $rep_perlssh2_done -eq 90 ];then
            echo "# Net::SSH2 SUBSYSTEM not integrated"
        fi
    fi

    if [ $rep_gd_done -eq 1 ];then
        echo "# GD SUBSYSTEM built and integrated"
    else
        if [ $rep_gd_done -eq 90 ];then
            echo "# GD SUBSYSTEM not integrated"
        fi
    fi

    if [ $rep_perlmodules_done -eq 1 ];then
        echo "# PERLMODS SUBSYSTEM built and integrated"
    else
        if [ $rep_perlmodules_done -eq 90 ];then
            echo "# PERLMODS SUBSYSTEM not integrated"
        fi
    fi

   if [ $rep_wcurl_done -eq 1 ];then
        echo "# WWWCurl SUBSYSTEM built and integrated"
    else
        if [ $rep_wcurl_done -eq 90 ];then
            echo "# WWWCurl SUBSYSTEM not integrated"
        fi
    fi

    if [ $rep_dbdpg_done -eq 1 ];then
        echo "# DBDPG SUBSYSTEM built and integrated"
    else
        if [ $rep_dbdpg_done -eq 90 ];then
            echo "# DBDPG SUBSYSTEM not integrated"
        fi
    fi

    if [ $rep_pcre_done -eq 1 ];then
        echo "# PCRE SUBSYSTEM built and integrated"
    else
        if [ $rep_pcre_done -eq 90 ];then
            echo "# PCRE SUBSYSTEM not integrated"
        fi
    fi

    if [ $rep_fcgi_done -eq 1 ];then
        echo "# FCGI SUBSYSTEM built and integrated"
    else
        if [ $rep_fcgi_done -eq 90 ];then
            echo "# FCGI SUBSYSTEM not integrated"
        fi
    fi

    if [ $rep_fcgiw_done -eq 1 ];then
        echo "# FCGIW SUBSYSTEM: built and integrated"
    else
        if [ $rep_fcgiw_done -eq 90 ];then
            echo "# FCGIW SUBSYSTEM: not integrated"
        fi
    fi

    if [ $rep_ws_done -eq 1 ];then
        echo "# NGINX SUBSYSTEM: built and integrated"
    else
        if [ $rep_ws_done -eq 90 ];then
            echo "# NGINX SUBSYSTEM: not integrated"
        fi
    fi

    if [ $rep_wsscripts_done -eq 1 ];then
        echo "# NGINX START SUBSYSTEM: built and integrated"
    else
        if [ $rep_wsscripts_done -eq 90 ];then
            echo "# NGINX START SUBSYSTEM: not integrated"
        fi
    fi

    if [ $rep_pkgc_done -eq 1 ];then
        echo "# PKGCONFIG SUBSYSTEM: built and integrated"
    else
        if [ $rep_pkgc_done -eq 90 ];then
            echo "# PKGCONFIG SUBSYSTEM: not integrated"
        fi
    fi

    if [ $rep_pixm_done -eq 1 ];then
        echo "# PIXMAN SUBSYSTEM: built and integrated"
    else
        if [ $rep_pixm_done -eq 90 ];then
            echo "# PIXMAN SUBSYSTEM: not integrated"
        fi
    fi

    if [ $rep_libpng_done -eq 1 ];then
        echo "# LIBPNG SUBSYSTEM: built and integrated"
    else
        if [ $rep_libpnbg_done -eq 90 ];then
            echo "# LIBPNG SUBSYSTEM: not integrated"
        fi
    fi

    if [ $rep_libjpeg_done -eq 1 ];then
        echo "# LIBJPEG SUBSYSTEM: built and integrated"
    else
        if [ $rep_libjpeg_done -eq 90 ];then
            echo "# LIBJPEG SUBSYSTEM: not integrated"
        fi
    fi

    if [ $rep_harfbuzz_done -eq 1 ];then
        echo "# HARFBUZZ SUBSYSTEM: built and integrated"
    else
        if [ $rep_harfbuzz_done -eq 90 ];then
            echo  "# HARFBUZZ SUBSYSTEM: not integrated"
        fi
    fi

    if [ $rep_ffi_done -eq 1 ];then
        echo  "# FFI SUBSYSTEM: built and integrated"
    else
        if [ $rep_ffi_done -eq 90 ];then
            echo  "# FFI SUBSYSTEM: not integrated"
        fi
    fi

    if [ $rep_glib_done -eq 1 ];then
        echo  "# GLIB SUBSYSTEM: built and integrated"
    else
        if [ $rep_glib_done -eq 90 ];then
            echo  "# GLIB SUBSYSTEM: not integrated"
        fi
    fi

    if [ $rep_cairo_done -eq 1 ];then
        echo  "# CAIRO SUBSYSTEM: built and integrated"
    else
        if [ $rep_cairo_done -eq 90 ];then
            echo  "# CAIRO SUBSYSTEM: not integrated"
        fi
    fi

    if [ $rep_pango_done -eq 1 ];then
        echo  "# PANGO SUBSYSTEM: built and integrated"
    else
        if [ $rep_pango_done -eq 90 ];then
            echo  "# PANGO SUBSYSTEM: not integrated"
        fi
    fi

    if [ $rep_rrd_done -eq 1 ];then
        echo  "# RRD SUBSYSTEM: built and integrated"
    else
        if [ $rep_rrd_done -eq 90 ];then
            echo  "# RRD SUBSYSTEM: not integrated"
        fi
    fi

    if [ $rep_rsts_done -eq 1 ];then
        echo  "# R SUBSYSTEM: built and integrated"
    else
        if [ $rep_rsts_done -eq 90 ];then
            echo  "# R SUBSYSTEM: not integrated"
        fi
    fi

    if [ $rep_rcairo_done -eq 1 ];then
        echo  "# R CAIRO SUBSYSTEM: built and integrated"
    else
        if [ $rep_rcairo_done -eq 90 ];then
            echo  "# R CAIRO SUBSYSTEM: not integrated"
        fi
    fi

    if [ $rep_rggplot2_done -eq 1 ];then
        echo  "# R GGPLOT2 SUBSYSTEM: built and integrated"
    else
        if [ $rep_rggplot2_done -eq 90 ];then
            echo  "# R GGPLOT2 SUBSYSTEM: not integrated"
        fi
    fi

    if [ $rep_rserve_done -eq 1 ];then
        echo  "# R Rserve SUBSYSTEM: built and integrated"
    else
        if [ $rep_rserve_done -eq 90 ];then
            echo  "# R RServe SUBSYSTEM: not integrated"
        fi
    fi

    if [ $rep_ranalysis_done -eq 1 ];then
        echo  "# R PCA,TS SUBSYSTEM: built and integrated"
    else
        if [ $rep_analysis_done -eq 90 ];then
            echo  "# R PCA,TS SUBSYSTEM: not integrated"
        fi
    fi

    if [ $rep_pdq_done -eq 1 ];then
        echo  "# PDQ SUBSYSTEM: built and integrated"
    else
        if [ $rep_pdq_done -eq 90 ];then
            echo  "# PDQ SUBSYSTEM: not integrated"
        fi
    fi

    if [ $rep_fin_done -eq 1] ;then
        echo  "# FINALIZE: done"
    else
        if [ $rep_pdq_done -eq 90 ];then
            echo  "# FINALIZE: not done"
        fi
    fi

 ;;

esac

echo "#################################################################"

elapsed=0
end=0
if [ "$OS_NAME" = "SunOS" ]; then
    end=`nawk 'BEGIN{print srand()}'`
else
    end=`date +%s`
fi

elapsed=`expr $end - $start`

if [ $elapsed -gt 3600 ]; then
    h=`expr $elapsed / 3600`
    m=`expr  $elapsed / 60 % 60`
    s=`expr $elapsed % 60`
    echo "# Total Build time: $h $m $s hh:mm:ss"
else
    if [ $elapsed -gt 60 -a $elapsed -lt 3600 ]; then
        m=`expr $elapsed / 60 % 60`
        echo "# Total Build time: $m mins"
    else
        echo "# Total Build time: $elapsed secs"
    fi
fi
echo "#################################################################"


#cleanup
rm /var/tmp/${STATFILE}
