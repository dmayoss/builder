#/bin/sh
#
#  SDR Development tools
#  FreeBSD SDR Analytics Authentication engine
#
#  Copyright (c) 2014 Stefan Parvu (www.systemdatarecorder.org).
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software Foundation,
#  Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#  (http://www.gnu.org/copyleft/gpl.html)

# VERSION: 1.1 

# ############################################################### #
# SDR Engine: Analytics AuthenticationFreeBSD                     #
# ############################################################### #


# ############################################################### #
# extract_archive                                                 #
# ############################################################### #
extract_archive() {
# $1 module name
# $2 dir build

modfile=$1
bfile=$2

# Debug
# echo "module name: $modfile"
# echo "archive dir: $bfile"

if [ -d "$bfile" ]; then
    echo "Info: Step 1 - Extracting $bfile ..." |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    echo "Warning: ${bfile} directory found, cleaning..." |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}

    rm -rf ${bfile}
    if [ $? -ne 0 ]; then
        echo "Error: cannot clean. Check ${modfile} , ${bfile}" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        exit 3
    fi 
    gzip -dc ${bfile}.tar.gz | tar xvf - >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
else
    echo "Info: Step 1 - Extracting $bfile ..." |\
    tee -a ${BUILD_PATH}/${BUILD_LOG}
    gzip -dc ${bfile}.tar.gz | tar xvf - >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
fi

}


# ############################################################### #
# Reporting: memcached Build Phase                                #
# ############################################################### #
build_auth_mcd() {
dir=memcached
step1=0
step2=0
step3=0
step4=0

cd $dir
echo "############################################################"
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Submodule: $dir" | tee -a ${BUILD_PATH}/${BUILD_LOG}
archive_file=`ls *.tar.gz`
# Debug
# echo "Archive: $archive_file"
# echo "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if [ $? -eq 0 ]; then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

env PATH=${iprefix}/bin:$PATH \
    PKG_CONFIG_PATH=/usr/local/libdata/pkgconfig  \
    CC=cc CFLAGS="-O3 -I/usr/local/include -I${iprefix}/include" \
    LDFLAGS="-L${iprefix}/lib -L/usr/local/lib -Wl,-rpath -Wl,${iprefix}/lib" \
    ./configure --enable-64bit --prefix=${iprefix} >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" | tee -a ${BUILD_PATH}/${BUILD_LOG}
    exit 3
else
    step2=1
fi  


# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    exit 3
else
    step3=1
fi 


# STEP 4
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make install perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    exit 3
else
    step4=1
fi


# final check; all 4 steps
auth_mcd_done=`expr $step1 + $step2 + $step3 + $step4`
if [ $auth_mcd_done -eq 4 ]; then
   auth_mcd_done=1
else
   auth_mcd_done=90
fi

cd ..
rm -rf $dirarchive >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 5
fi
cd ..

}


# ############################################################### #
# Reporting: OpenResty Build Phase                                #
# ############################################################### #

build_auth_openresty() {
dir=openresty
step1=0
step2=0
step3=0
step4=0


cd $dir
echo "############################################################"
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Submodule: $dir" | tee -a ${BUILD_PATH}/${BUILD_LOG}
archive_file=`ls *.tar.gz`
# Debug
# echo "Archive: $archive_file"
# echo "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if [ $? -eq 0 ]; then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

 env PKG_CONFIG_PATH=/usr/local/libdata/pkgconfig \
     CC=cc ./configure --prefix=${iprefix} --with-luajit \
     --with-cc=/usr/bin/cc >> ${BUILD_PATH}/${BUILD_LOG} 2>&1

if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi  

# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
gmake >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 

# STEP 4
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}


gmake install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make install gd failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

# final check; all 4 steps
auth_openresty_done=`expr $step1 + $step2 + $step3 + $step4`
if [ $auth_openresty_done -eq 4 ]; then
   auth_openresty_done=1
else
   auth_openresty_done=90
fi

cd ..
rm -rf $dirarchive >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 5
fi 
cd ..

}


# ############################################################### #
# Reporting: Scripts                                              #
# ############################################################### #
build_auth_config() {

dir=config
step1=0


cd $dir/${OS_NAME}
echo "############################################################"
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Submodule: $dir ${OS_NAME}" | tee -a ${BUILD_PATH}/${BUILD_LOG}

# STEP 1
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 1 - Installing nginx wrappers ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

cp nginx.conf ${iprefix}/nginx/conf
if [ $? -ne 0 ]; then
    echo "Error: cannot install nginx.conf script !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step1=1
fi


# final check
auth_config_done=$step1
if [ $auth_config_done -eq 1 ]; then
   auth_config_done=1
else
   auth_config_done=90
fi

cd ../..

}



# ############################################################### #
# Reporting: Finalize                                             #
# ############################################################### #


build_auth_fin() {

dir=scripts
step1=0
step2=0
buildno=03

# export iprefix
export iprefix=${iprefix}


cd $dir
echo "############################################################"
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Submodule: $dir" | tee -a ${BUILD_PATH}/${BUILD_LOG}


# STEP 1
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 1 - Setting up directory structure ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

if [ ! -d ${iprefix}/etc ]; then
    mkdir ${iprefix}/etc
    if [ $? -ne 0 ]; then
        echo "Error: cannot configure etc directory !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        step1=`expr $step1 + 1`
    fi
fi


if [ ! -d ${iprefix}/static ]; then
    mkdir ${iprefix}/static
    if [ $? -ne 0 ]; then
        echo "Error: cannot configure static directory !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        step1=`expr $step1 + 1`
    fi
fi


if [ ! -d ${iprefix}/app ]; then
    mkdir ${iprefix}/app
    if [ $? -ne 0 ]; then
        echo "Error: cannot configure app directory !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        step1=`expr $step1 + 1`
    fi
fi


if [ ! -d ${iprefix}/logs ]; then
    mkdir ${iprefix}/logs
    if [ $? -ne 0 ]; then
        echo "Error: cannot configure logs directory !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        step1=`expr $step1 + 1`
    fi

    step1=`expr $step1 + 1`
fi


# there are 4 settings
step1=`expr $step1 / 4`


# STEP 2
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Installing sdr-auth startup script ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

cp sdr-auth ${iprefix}/etc
if [ $? -ne 0 ]; then
    echo "Error: cannot install sdr-auth script !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi


# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Creating sdranalytics-auth package ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

cd ${iprefix}/../../..
tar cvf /var/tmp/sdranalytics-auth-1.0.0b${buildno}-freebsd10.amd64 sdr
bzip2 /var/tmp/sdranalytics-auth-1.0.0b${buildno}-freebsd10.amd64
if [ $? -ne 0 ]; then
    echo "Error: cannot create sdranalytics-auth package !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi
# final check; all 3 steps
auth_fin_done=`expr $step1 + $step2 + $step3`
if [ "$auth_fin_done" -eq 3 ]; then
   auth_fin_done=1
else
   auth_fin_done=90
fi

cd ..

}
